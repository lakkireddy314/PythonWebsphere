Directory Structure
python
Copy
venafi_cert_renew/
├── group_vars/
│   └── prod.yml            # httpd_pickup_ids mapping
├── handlers/
│   └── main.yml            # Restart handler
├── tasks/
│   ├── main.yml
│   ├── download_local_cert.yml
│   ├── check_local_cert.yml
│   ├── locate_configs.yml
│   ├── extract_values.yml
│   ├── renew_cert.yml
│   ├── backup_and_replace.yml
│   ├── restore_cert.yml
│   ├── cleanup.yml
│   └── send_report.yml
├── vars/
│   └── main.yml            # Centralized variables
└── README.md               # Role documentation
1. vars/main.yml
Centralized configuration variables. 
Ansible Documentation

yaml
Copy
---
env: "prod"

venafi_access_token: "REPLACE_WITH_ACCESS_TOKEN"
venafi_pickupid:     "REPLACE_WITH_PICKUP_ID"

cert_renew_threshold: 90

vcert_download_url: "https://localhost/Certs/vcert.zip"
vcert_install_dir:  "/tmp/vcert"
vcert_password:     "WEBASCh@ngeit"

httpd_config_path:  "/opt/ihs/85/conf/httpd.conf"

report_only:        false
2. group_vars/prod.yml
Define HTTPD config → Pickup‑ID (cert alias) mapping. Eliminates need for a separate list. 
Ansible Documentation

yaml
Copy
---
httpd_pickup_ids:
  "/path/to/test1.conf": "cert_alias_test1"
  "/path/to/test2.conf": "cert_alias_test2"
3. handlers/main.yml
Restart IBM HTTP Server when certificates are replaced. Tags-driven execution. 
Ansible Documentation

yaml
Copy
---
- name: "Restart IBM HTTP Server"
  command: "/opt/ihs/85/bin/apachectl -f {{ httpd_config_path }} -k restart"
  listen: "cert_replaced"
  tags:
    - restart
4. tasks/main.yml
Entry point orchestrating the full workflow. 
Ansible Documentation

yaml
Copy
---
- include_tasks: download_local_cert.yml        # precheck, vcert-pickup

- include_tasks: check_local_cert.yml          # expiry-check

- name: "Skip host if cert not within renewal window"
  meta: end_play
  when: not local_cert_info.changed
  tags:
    - precheck

- include_tasks: locate_configs.yml            # config-discovery

- include_tasks: extract_values.yml            # extract, config-parse

- include_tasks: renew_cert.yml                # renew

- include_tasks: backup_and_replace.yml        # backup, replace

- include_tasks: restore_cert.yml              # validate, restore

- include_tasks: cleanup.yml                   # cleanup

- include_tasks: send_report.yml               # report
5. tasks/download_local_cert.yml
Download each certificate locally via VCert pickup‑ID; tags: precheck, vcert-pickup 
Ansible Documentation

yaml
Copy
---
- name: "Ensure VCert directory exists"
  file:
    path: "{{ vcert_install_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Download VCert CLI zip"
  get_url:
    url: "{{ vcert_download_url }}"
    dest: "{{ vcert_install_dir }}/vcert.zip"
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Unarchive VCert CLI"
  unarchive:
    src: "{{ vcert_install_dir }}/vcert.zip"
    dest: "{{ vcert_install_dir }}/"
    remote_src: yes
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Fetch PEM via VCert pickup for each config"
  command: >
    {{ vcert_install_dir }}/vcert pickup
      --format pem
      --output {{ vcert_install_dir }}/{{ pickup_entry.value }}.pem
      --pickup-id {{ pickup_entry.value }}
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: pickup_entry
    label: "{{ pickup_entry.key }}"
  register: pickup_results
  delegate_to: localhost
  tags:
    - precheck
    - vcert-pickup
6. tasks/check_local_cert.yml
_Inspect local cert’s expiry & serial; tags: precheck, expiry-check 
Ansible Documentation

yaml
Copy
---
- name: "Get local cert expiry date"
  shell: |
    openssl x509 -enddate -noout \
      -in {{ vcert_install_dir }}/{{ pickup_entry.value }}.pem \
      | cut -d= -f2
  register: cert_enddate
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: pickup_entry
    label: "{{ pickup_entry.value }}"
  delegate_to: localhost
  tags:
    - precheck
    - expiry-check

- name: "Compute days until expiry"
  set_fact:
    cert_days_remaining: >-
      {{
        ((cert_enddate.stdout | to_datetime("%b %d %H:%M:%S %Y %Z")).timestamp()
         - (ansible_date_time.iso8601 | to_datetime).timestamp())
        / 86400 | round(0,'floor') | int
      }}
  tags:
    - precheck
    - expiry-check

- name: "Get local cert serial number"
  shell: |
    openssl x509 -in {{ vcert_install_dir }}/{{ pickup_entry.value }}.pem \
      -serial -noout | cut -d= -f2
  register: cert_serial_local
  delegate_to: localhost
  tags:
    - precheck
    - expiry-check

- name: "Record local_cert_info"
  set_fact:
    local_cert_info:
      expiry_days: "{{ cert_days_remaining }}"
      serial:      "{{ cert_serial_local.stdout }}"
      changed:     "{{ cert_days_remaining <= cert_renew_threshold }}"
  tags:
    - precheck
    - expiry-check

- name: "Debug local certificate status"
  debug:
    msg: >
      Cert {{ pickup_entry.value }} has {{ cert_days_remaining }} days left
      (serial {{ cert_serial_local.stdout }}); {{ 'will renew' if local_cert_info.changed else 'skipping' }}.
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: pickup_entry
  tags:
    - precheck
    - expiry-check
7. tasks/locate_configs.yml
Convert mapping into a loopable list; tags: config-discovery 
Ansible Documentation

yaml
Copy
---
- name: "Build list of HTTPD configurations"
  set_fact:
    bpm_conf_files: "{{ httpd_pickup_ids | dict2items }}"
  tags:
    - config-discovery
8. tasks/extract_values.yml
Parse HTTPD configs, extract Keyfile/SSLServerCert/Listen, apply alias; tags: extract, config-parse 
Ansible Documentation

yaml
Copy
---
- name: "Initialize cert_configs"
  set_fact:
    cert_configs: []
  tags:
    - extract

- name: "Extract certificate entries from HTTPD configs"
  block:
    - name: "Slurp {{ httpd_entry.key }}"
      slurp:
        src: "{{ httpd_entry.key }}"
      register: conf_raw
      tags:
        - extract

    - name: "Decode content"
      set_fact:
        file_content: "{{ conf_raw.content | b64decode }}"
      tags:
        - extract

    - name: "Build and append entries"
      set_fact:
        cert_configs: "{{ cert_configs + new_entries }}"
      vars:
        keyfiles: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','Keyfile\\s*=\\s*(\\S+)')
             | reject('equalto',None)
             | list }}
        ssl_aliases: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','SSLServerCert\\s*=\\s*(\\S+)')
             | reject('equalto',None)
             | list }}
        listen_ports: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','^Listen\\s+(?:[\\w\\.]+:)?(\\d+)')
             | reject('equalto',None)
             | list }}
        new_entries: >-
          {{ keyfiles | zip(ssl_aliases)
             | map('list')
             | map('community.general.dict',
                   config_file=httpd_entry.key,
                   kdb_file=item0,
                   cert_alias=httpd_entry.value,
                   listen_port=(listen_ports[0] if listen_ports|length>0 else '443')
                 ) | list }}
      loop: "{{ bpm_conf_files }}"
      loop_control:
        loop_var: httpd_entry
        label: "{{ httpd_entry.key }}"
      tags:
        - extract
        - config-parse
  rescue:
    - debug:
        msg: "Error processing {{ httpd_entry.key }}; skipping."
      tags:
        - extract
9. tasks/renew_cert.yml
Renew certificates via VCert CLI; tags: renew, vcert-renew 
Spacelift

yaml
Copy
---
- name: "Determine unique aliases needing renewal"
  set_fact:
    renewal_aliases: >-
      {{ cert_configs
         | selectattr('days_until_expiry','defined')
         | selectattr('days_until_expiry','le',cert_renew_threshold)
         | map(attribute='cert_alias') | unique | list }}
  tags:
    - renew

- name: "Renew certificates via VCert CLI"
  command: >
    {{ vcert_install_dir }}/vcert renew
      --alias {{ alias_entry }}
      --format pfx
      --password {{ vcert_password }}
      --chain full
      --output {{ vcert_install_dir }}/{{ alias_entry }}.pfx
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  loop: "{{ renewal_aliases }}"
  loop_control:
    loop_var: alias_entry
    label: "{{ alias_entry }}"
  delegate_to: localhost
  register: renew_results
  when: not report_only
  tags:
    - renew
    - vcert-renew
10. tasks/backup_and_replace.yml
Backup KDB and replace certificates; tags: backup, replace 
Server Fault

yaml
Copy
---
- name: "Backup & replace certificates in KDB"
  loop: "{{ cert_configs
             | selectattr('days_until_expiry','defined')
             | selectattr('days_until_expiry','le',cert_renew_threshold) }}"
  loop_control:
    loop_var: cert_entry
    label: "{{ cert_entry.cert_alias }}"
  block:
    - name: "Backup {{ cert_entry.kdb_file }}"
      copy:
        src: "{{ cert_entry.kdb_file }}"
        dest: "/install/MWVenafi/{{ env }}/{{ ansible_hostname }}/{{ cert_entry.kdb_file | basename }}"
        backup: yes
      tags:
        - backup

    - name: "Copy renewed PFX for {{ cert_entry.cert_alias }}"
      copy:
        src: "{{ vcert_install_dir }}/{{ cert_entry.cert_alias }}.pfx"
        dest: "/tmp/vcert/{{ cert_entry.cert_alias }}.pfx"
      delegate_to: localhost
      run_once: true
      tags:
        - replace

    - name: "Replace certificate in KDB"
      command: >
        {{ vcert_install_dir }}/vcert replace
          --alias {{ cert_entry.cert_alias }}
          --pfx /tmp/vcert/{{ cert_entry.cert_alias }}.pfx
          --db {{ cert_entry.kdb_file }}
          --password {{ vcert_password }}
      register: replace_result
      tags:
        - replace

    - name: "Trigger restart handler"
      meta: flush_handlers
      notify: "cert_replaced"
      tags:
        - replace
11. tasks/restore_cert.yml
Validate & restore on failure; tags: validate, restore 
Stack Overflow

yaml
Copy
---
- name: "Validate certificate replacements"
  loop: "{{ cert_configs
             | selectattr('days_until_expiry','defined')
             | selectattr('days_until_expiry','le',cert_renew_threshold) }}"
  loop_control:
    loop_var: cert_entry
    label: "{{ cert_entry.cert_alias }}"
  block:
    - name: "Validate with gsk8capicmd"
      command: >
        /usr/bin/gsk8capicmd -cert -view
          -db {{ cert_entry.kdb_file }}
          -label {{ cert_entry.cert_alias }} -stashed
      register: new_info
      tags:
        - validate

    - name: "Retrieve network serial via OpenSSL s_client"
      command: >
        echo | openssl s_client
          -servername {{ ansible_hostname }}
          -connect {{ ansible_hostname }}:{{ cert_entry.listen_port }}
          2>/dev/null | openssl x509 -noout -serial
      register: net_serial
      tags:
        - validate

    - name: "Fail on serial mismatch"
      fail:
        msg: >
          Serial mismatch for {{ cert_entry.cert_alias }}:
          KDB={{ new_info.stdout | regex_search('Serial Number:\\s*(\\S+)','\\1') }}
          vs network={{ net_serial.stdout }}
      when: >
        (new_info.stdout | regex_search('Serial Number:\\s*(\\S+)','\\1'))
        != net_serial.stdout
      tags:
        - validate
        - restore
12. tasks/cleanup.yml
Remove temporary artifacts; tag: cleanup 
Ansible Documentation

yaml
Copy
---
- name: "Cleanup VCert artifacts"
  file:
    path: "{{ vcert_install_dir }}"
    state: absent
  delegate_to: localhost
  run_once: true
  tags:
    - cleanup
13. tasks/send_report.yml
Send comprehensive email report; tag: report 
The world's open source leader

yaml
Copy
---
- name: "Compose comprehensive report"
  set_fact:
    comprehensive_report: |
      Venafi Cert Renewal Report ({{ 'DRY RUN' if report_only else 'EXECUTION' }})
      =====================================================
      Host: {{ ansible_hostname }}
      Cert Days Remaining: {{ cert_days_remaining }}
      Serial (local): {{ cert_serial_local.stdout }}
      Renewal Threshold: {{ cert_renew_threshold }} days
      Action: {{ 'Renewed' if cert_days_remaining <= cert_renew_threshold else 'Skipped' }}
  tags:
    - report

- name: "Send email report"
  mail:
    host: "localhost"
    to: "web@test.com"
    subject: "Cert Renewal Report for {{ ansible_hostname }}"
    body: "{{ comprehensive_report }}"
  tags:
    - report
Features & Benefits
Single Source Mapping: Uses httpd_pickup_ids dict directly, no redundant lists 
Ansible Documentation
.

Descriptive Loop Variables: pickup_entry, httpd_entry, alias_entry, cert_entry for improved clarity 
Ansible Documentation
.

Fine‑Grained Tags: Tasks are tagged by function (precheck, renew, backup, validate, cleanup, report), enabling targeted runs with --tags 
Ansible Documentation
.

Pre‑Check Optimization: Local VCert pickup and OpenSSL expiry/serial checks skip hosts out of window 
Ansible Documentation
.

Robust Renewal Workflow: Backups, secure replacements, dual validation (gsk8capicmd & OpenSSL), and safe restore on failure.

Handler‑Driven Restart: Only restarts IBM HTTP Server when certificates actually change 
Server Fault
.

Cleanup & Reporting: Control‑node artifacts are removed and detailed reports are emailed every run 
The world's open source leader
.

Dry‑Run Support: Set report_only: true to preview without modifications.

This fully‑tagged role provides maximum flexibility and clarity in large‑scale certificate management workflows.







Sources




You said:
output the details of a playbook to call the above role based on tags


ChatGPT said:

Thought for 16 seconds
1 searches · 9 sources
Here’s a simple playbook that dynamically includes the venafi_cert_renew role and applies its internal task tags so you can run any stage of the workflow via --tags. We use include_role with the apply parameter (so that the role’s own task‐level tags are inherited) and mark the inclusion itself as always so it isn’t filtered out by tag selection 
Ansible Documentation
​
Ansible Documentation
.

yaml
Copy
---
# playbook.yml
- name: Venafi Certificate Renewal Orchestration
  hosts: all
  become: true

  tasks:
    - name: "Include venafi_cert_renew role with tag inheritance"
      include_role:
        name: venafi_cert_renew
        apply:
          tags:
            - precheck
            - expiry-check
            - config-discovery
            - extract
            - renew
            - backup
            - replace
            - validate
            - restore
            - cleanup
            - report
      # ensure the include_role task itself always runs so tags inside it can be selected
      tags:
        - always
How It Works
include_role + apply.tags
By using apply: tags: we tell Ansible to add those tags to all tasks inside venafi_cert_renew. You don’t need to duplicate tags on every internal task—this one line does it for you 
Ansible Documentation
.

tags: always
This ensures the include_role task itself is never skipped when you run with --tags. Without it, Ansible might skip the include entirely and you’d see nothing happen 
GitHub
.

Running Specific Stages
Once you have this playbook, you can pick and choose which part of the role to execute:

bash
Copy
# Only run the precheck (VCert pickup + expiry check)
ansible-playbook playbook.yml --tags precheck

# Only run the config parsing stages
ansible-playbook playbook.yml --tags config-discovery,extract

# Only renew certificates
ansible-playbook playbook.yml --tags renew

# Only do backups and replacements
ansible-playbook playbook.yml --tags backup,replace

# Only validate and restore (if needed)
ansible-playbook playbook.yml --tags validate

# Only cleanup temp files
ansible-playbook playbook.yml --tags cleanup

# Only generate and send the report
ansible-playbook playbook.yml --tags report

# Full end‑to‑end run (no --tags, or use --tags always)
ansible-playbook playbook.yml
Features & Benefits
Granular Control: Execute any subset of the workflow without editing the role—just pass --tags.

Single Include: One include_role handles all stages; no need for multiple includes or separate plays.

Tag Inheritance: Leverages apply.tags so that you get exactly the internal task tags you defined in venafi_cert_renew.

Always‑On Inclusion: tags: always makes sure the role is loaded even when using --tags, so the internal tags can take effect.

Simplicity: Clean, one‑task playbook; all logic resides in the role itself, keeping your playbook thin.

References

include_role module: describes apply: tags usage 
Ansible Documentation

Tags in playbooks: explains tags: keyword and inheritance 
Ansible Documentation




Sources
