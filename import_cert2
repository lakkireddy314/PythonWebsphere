#!/usr/bin/env jython
import sys, os
from com.ibm.ws.scripting import ScriptingException

# 1. Validate inputs: wsadmin Jython sys.argv excludes the script name
if len(sys.argv) < 3:
    print "✖ Usage: importCerts.py profile:host keystorePassword was_user"
    sys.exit(1)

# 2. Extract arguments
profile_host      = sys.argv[0]
keystore_password = sys.argv[1]
was_user          = sys.argv[2]

if ':' not in profile_host:
    print "✖ Invalid argument '%s', expected profile:host" % profile_host
    sys.exit(1)

profile, host = profile_host.split(':', 1)
alias = host + "_subca_ss"
cert_path = "/home/%s/Ansible_SelfSigned/%s.pfx" % (was_user, host)

# 3. Discover the cell
cell_ids = AdminConfig.list('Cell').split()
if not cell_ids:
    print "✖ No Cell found!"
    sys.exit(1)
cellName = AdminConfig.showAttribute(cell_ids[0], 'name')

# 4. Gather profile IDs
dmgr_ids      = AdminConfig.getid('DeploymentManager').split()
node_ids      = AdminConfig.getid('NodeAgent').split()
websrv_ids    = AdminConfig.getid('WebServer').split()

def find_profile(ids, name):
    for cid in ids:
        if AdminConfig.showAttribute(cid, 'name') == name:
            return cid
    return None

# 5. Determine profile type & keystore
if find_profile(dmgr_ids, profile):
    # Deployment Manager
    scope = "(cell):%s" % cellName
    ksName = "CellDefaultKeyStore"
    ssl_path = "/Cell:%s/Security:/SSLConfig:defaultSSLConfig/" % cellName

elif find_profile(node_ids, profile):
    # Node Agent
    nodeName = profile.replace('_profile_name','')
    scope = "(cell):%s:(node):%s" % (cellName, nodeName)
    ksName = "NodeDefaultKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (cellName, nodeName)

else:
    # WebServer
    wsrv = find_profile(websrv_ids, profile)
    if not wsrv:
        print "✖ Profile '%s' not found as DMGR, Node, or WebServer" % profile
        sys.exit(1)
    nodeName = AdminConfig.showAttribute(wsrv, 'nodeName')
    scope = "(cell):%s:(node):%s" % (cellName, nodeName)
    ksName = "CMSKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (cellName, nodeName)

# 6. Import certificate into the determined keystore
try:
    AdminTask.importCertificate([
        '-keyStoreName',           ksName,
        '-keyStoreScope',          scope,
        '-keyFilePath',            cert_path,
        '-keyFilePassword',        keystore_password,
        '-keyFileType',            'PKCS12',
        '-certificateAliasFromKeyFile', alias
    ])  # batch import into keystore :contentReference[oaicite:7]{index=7}

    # 7. Update SSLConfig default alias
    ssl_ids = AdminConfig.getid(ssl_path).split()
    if ssl_ids:
        AdminConfig.modify(ssl_ids[0], [
            ['keyStoreName',    ksName],
            ['keyStoreScope',   scope],
            ['certificateAlias',alias]
        ])  # modify defaultSSLConfig :contentReference[oaicite:8]{index=8}
    AdminConfig.save()  # persist changes :contentReference[oaicite:9]{index=9}

    print "✔ Profile %s: imported alias '%s'" % (profile, alias)

except ScriptingException, e:
    print "✖ Error in profile '%s': %s" % (profile, e)
    sys.exit(1)
