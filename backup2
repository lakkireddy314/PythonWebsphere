- name: Set feature variable based on environment
  set_fact:
    feature: "{{ prodfeature if env[:3] == 'prd' else nonprodFeature }}"

- name: Install feature using imcl
  command: "imcl install {{ feature }}"


Below is a complete example of the restore.yml task file (plus supporting variables) for an IBM WebServer/WebSphere upgrade role. This version has been restructured to use host‐specific backup directories (by incorporating the ansible_hostname fact) and an aggregated components list. It then loops over each component and its defined source directories, restoring only backups from the current host. At the end, you'll find an explanation of the features and design decisions.

upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging).
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# Installation flags (set true if the component is installed)
websphere_installed: true
baw_installed: false
ihs_installed: false
plugin_installed: true

# Define a components list for restore tasks.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control variables (used in the overall role)
pre_upgrade_backup: true

# Mode control: set mode to "upgrade" to run upgrade tasks (with backup & rollback),
# or "restore" to run only the restore tasks.
mode: "upgrade"
upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
# When mode is "upgrade":
#   1. (Optionally) Run pre-upgrade backup tasks.
#   2. Run upgrade tasks (wrapped in block/rescue for automatic rollback).
#
# When mode is "restore", only the restore tasks are executed.

- name: Execute restore tasks only when mode is "restore"
  import_tasks: restore.yml
  when: mode == "restore"

- name: Execute upgrade process when mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)
      
    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere
      import_tasks: upgrade.yml
  rescue:
    - name: Upgrade failed; executing restore tasks for rollback
      import_tasks: restore.yml
  when: mode == "upgrade"
upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# restore.yml - Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# This file loops over each component in the "components" list defined in vars/main.yml,
# and for each component, it processes every source directory (tar_dirs).
# Each task checks if the host-specific backup directory exists,
# finds the latest backup archive, and then restores it to the original location.
# Older backup files are cleaned up afterwards.

- name: Restore backups for each component
  block:
    - name: Process component {{ comp.name }} for restore
      block:
        - name: Process source directory {{ src }} for restore in {{ comp.name }}
          block:
            - name: Check if backup target exists for {{ src | basename }} ({{ comp.name }})
              stat:
                path: "{{ comp.backup_dir }}/{{ src | basename }}"
              register: backup_target_stat

            - name: Skip restore for {{ src | basename }} ({{ comp.name }}) if no backup found on {{ ansible_hostname }}
              debug:
                msg: "No backup archive available for {{ src | basename }} ({{ comp.name }}) on {{ ansible_hostname }}."
              when: not backup_target_stat.stat.exists

            - name: Find backup files for {{ src | basename }} ({{ comp.name }})
              find:
                paths: "{{ comp.backup_dir }}/{{ src | basename }}"
                patterns: "{{ src | basename }}_*.tar"
                file_type: file
              register: backup_files
              when: backup_target_stat.stat.exists

            - name: Set latest backup file for {{ src | basename }} ({{ comp.name }})
              set_fact:
                latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
              when: backup_files.files | length > 0

            - name: Remove current directory {{ src }} ({{ comp.name }})
              file:
                path: "{{ src }}"
                state: absent
              when: latest_backup is defined

            - name: Recreate directory {{ src }} ({{ comp.name }})
              file:
                path: "{{ src }}"
                state: directory
                mode: '0755'
              when: latest_backup is defined

            - name: Restore from latest backup for {{ src | basename }} ({{ comp.name }})
              unarchive:
                src: "{{ latest_backup }}"
                dest: "{{ src }}"
                remote_src: yes
              when: latest_backup is defined

            - name: Clean up older backups for {{ src | basename }} ({{ comp.name }}) - keep only latest
              file:
                path: "{{ old_backup.path }}"
                state: absent
              loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
              loop_control:
                loop_var: old_backup
              when: backup_files.files | length > 1

          loop: "{{ comp.tar_dirs }}"
          loop_control:
            loop_var: src
      when: comp.installed
  loop: "{{ components }}"
  loop_control:
    loop_var: comp
Explanation & Features
Per-Host Backup Directories:
The backup target directories (both for WebServer and WebSphere) are constructed to include {{ ansible_hostname }}. This ensures that each host saves its backup archives in its own subdirectory. For example, if the hostname is server1, the WebSphere backups would be stored in:
"/install/BAW/backups/production/server1/WebSphere".

Components Aggregation:
A variable called components (defined in vars/main.yml) aggregates details for each component:

name: A human-readable name (e.g. "WebServer" or "WebSphere").
tar_dirs: The list of source directories that need to be backed up/restored.
backup_dir: The target backup directory (host-specific).
installed: A condition (using installation flags) to decide whether the tasks should run for that component.
Looping Structure in restore.yml:
The restore.yml file uses a nested loop:

It first loops over each component in the components list.
For each component, it loops over each source directory in tar_dirs.
For each directory, it checks if the backup target (specific to that directory and host) exists.
If it exists, it finds backup files matching the naming pattern (using the basename of the directory), sorts them by modification time, and picks the latest backup.
The current source directory is then removed and re-created, and the backup archive is unarchived to restore the directory.
Older backups are then removed, keeping only the latest.
Conditional Checks and Robustness:

The use of the stat module ensures that tasks run only if the required backup target exists.
The debug tasks provide informative messages when no backups are found for a particular source.
The logic for selecting and cleaning up backup files is robust, handling cases where multiple archives exist.
Flexibility with Mode Control:
The role uses a mode variable (set to "upgrade" or "restore") to decide whether to run the upgrade process (with backup and automatic rollback on failure) or to run only the restore tasks. This makes it easy to perform a standalone restore when needed.

Ease of Maintenance:
By aggregating similar logic into loops and using variables to define component-specific details, the role is easier to update. For instance, if you add another component, you only need to extend the components list in the vars file.

This restructured role—with its host-specific backups and aggregated restore logic—is designed for environments with multiple servers, ensuring that each host’s backup and restore operations remain isolated and manageable.
