# listHostnamesComplete.py
# wsadmin Jython script: map profiles, import certificates, and configure SSL
import sys

# --- Input Argument Parsing ---
# Usage:
#   wsadmin.sh -lang jython -f listHostnamesComplete.py <profile_name> <host_name> <password> <was_user>
if len(sys.argv) < 4:
    print "Usage: wsadmin.sh -lang jython -f listHostnamesComplete.py <profile_name> <host_name> <password> <was_user>"
    sys.exit(1)

# wsadmin Jython sys.argv excludes the script name
profile_name = sys.argv[0]
host_name    = sys.argv[1]
password     = sys.argv[2]
was_user     = sys.argv[3]

# Certificate path and alias
pfx_path = '/home/%s/Ansible_self_signed/%s.pfx' % (was_user, host_name)
alias    = '%s_subca_ss' % host_name

# --- Helper Functions ---
def strip_paren(s):
    return s[:-1] if s.endswith(')') else s

def addNodeMappings(entries):
    result = {}
    for entry in entries:
        parts = strip_paren(entry.split('(',1)[1]).split('|',1)[0].split('/')
        cell, node = parts[1], parts[3]
        result[node] = {'cellName': cell, 'nodeName': node}
    return result

def addWebMappings(entries):
    result = {}
    for entry in entries:
        web = entry.split('(')[0]
        parts = strip_paren(entry.split('(',1)[1]).split('|',1)[0].split('/')
        cell, node = parts[1], parts[3]
        result[web] = {'cellName': cell, 'nodeName': node}
    return result

# --- Build Profile Maps ---
dmgr_map = addNodeMappings(AdminTask.listServers('[-serverType DEPLOYMENT_MANAGER]').splitlines())
node_map = addNodeMappings(AdminTask.listServers('[-serverType NODE_AGENT]').splitlines())
web_map  = addWebMappings(  AdminTask.listServers('[-serverType WEB_SERVER]').splitlines())

# --- Certificate Import & SSL Config Functions ---
def importToNode(name, info):
    cell, node = info['cellName'], info['nodeName']
    # Determine keystore and SSL config alias based on profile type
    if name in dmgr_map:
        keyStoreName     = 'CellDefaultKeystore'
        alias_ssl_config = 'CellDefaultSSLSettings'
    else:
        keyStoreName     = 'NodeDefaultKeystore'
        alias_ssl_config = 'NodeDefaultSSLSettings'
    scope = '(cell):%s:(node):%s' % (cell, node)
    print 'Importing certificate to %s on %s...' % (keyStoreName, name)
    AdminTask.importCertificate(
        ['-keyStoreName', keyStoreName,
         '-keyStoreScope', scope,
         '-keyFilePath', pfx_path,
         '-keyFilePassword', password,
         '-keyFileType', 'PKCS12',
         '-certificateAliasFromKeyFile', alias]
    )
    print 'Modifying SSL config alias %s...' % alias_ssl_config
    AdminTask.modifySSLConfig(
        ['-alias', alias_ssl_config,
         '-scopeName', 'Node:%s' % node,
         '-clientKeyAlias', alias,
         '-serverKeyAlias', alias]
    )
    AdminConfig.save()
    AdminNodeManagement.syncActiveNodes()
    print '%s %s SSL updated.' % (alias_ssl_config, name)


def importToWeb(name, info):
    cell, node = info['cellName'], info['nodeName']
    keyStoreName = 'CMSKeystore'
    scope = '(cell):%s:(node):%s' % (cell, node)
    print 'Importing certificate to %s for web server %s...' % (keyStoreName, name)
    AdminTask.importCertificate(
        ['-keyStoreName', keyStoreName,
         '-keyStoreScope', scope,
         '-keyFilePath', pfx_path,
         '-keyFilePassword', password,
         '-keyFileType', 'PKCS12',
         '-certificateAliasFromKeyFile', alias]
    )
    # Add plugin custom property
    serverId = AdminConfig.getid(
        '/Cell:%s/Node:%s/Server:%s/' % (cell, node, name)
    )
    print 'Adding plugin custom property CERTLABEL with alias %s...' % alias
    AdminConfig.create('Property', serverId, [['name','CERTLABEL'], ['value', alias]])
    AdminConfig.save()
    print 'Regenerating and publishing plugin configuration for %s...' % name
    AdminTask.generatePlugInCfg(['-serverName', name])
    AdminTask.publishPlugInCfg(['-serverName', name])
    print 'Web server %s plugin updated.' % name

# --- Profile Matching & Execution ---
def matchAndImport(name, mapping, label, func):
    if mapping.has_key(name):
        print 'Profile matched %s: %s' % (label, name)
        func(name, mapping[name])
        return True
    return False

if not matchAndImport(profile_name, dmgr_map, 'DMGR', importToNode):
    if not matchAndImport(profile_name, node_map, 'Node Agent', importToNode):
        if not matchAndImport(profile_name, web_map, 'Web Server', importToWeb):
            print 'Profile %s not found.' % profile_name
