Role Folder Structure
css
Copy
upgrade_ibm/
├── tasks
│   ├── main.yml
│   ├── backup.yml
│   ├── process_webserver_backup.yml
│   ├── process_websphere_backup.yml
│   ├── upgrade.yml
│   ├── restore.yml
│   ├── process_webserver_restore.yml
│   ├── process_websphere_restore.yml
│   └── post_configs.yml
├── vars
│   └── main.yml
└── installation_flags.yml
A sample playbook file, upgrade_ibm_playbook.yml, is provided at the end.

1. upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging)
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# The following installation flags are defined here (and can be overridden by external file).
baw_installed: false
websphere_installed: false
ihs_installed: false
plugin_installed: false

# Define a components list used by restore tasks.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control:
# If true, perform a pre-upgrade backup.
pre_upgrade_backup: true

# Rollback control:
# Set enable_rollback to true to run restore tasks in case of an upgrade failure.
enable_rollback: true

# Optional upgrade tasks control:
# Set upgrade_enabled to true to run upgrade tasks (default) or false to skip them.
upgrade_enabled: true

# Mode control:
# "upgrade" runs the full upgrade process (with backup, optional upgrade, rollback, and post-config tasks).
# "restore" runs only the restore tasks.
mode: "upgrade"

# Only configuration mode:
# When true, only the post-upgrade configuration tasks run.
only_config: false
Explanation & Features:

Backup/Target Directories:
The target backup paths include {{ ansible_hostname }} to isolate backups per host.
Source Directories:
Lists of directories to be backed up for WebServer and WebSphere.
Retention & Installation Flags:
backup_retain defines how many archives to keep. Flags like baw_installed, websphere_installed, etc. may be overridden by an external file.
Components List:
Aggregates data for each component so restore tasks can loop over them.
Control Variables:
Variables such as pre_upgrade_backup, enable_rollback, upgrade_enabled, mode, and only_config allow flexible control over the workflow.
2. upgrade_ibm/installation_flags.yml
yaml
Copy
---
baw_installed: false
websphere_installed: true
ihs_installed: false
plugin_installed: true
Explanation & Features:

External Installation Flags:
This file provides installation flags that are loaded by the role, allowing dynamic overriding of defaults.
3. upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
#
# Workflow:
# - First, load installation flags from installation_flags.yml.
# - If only_config is true, only post-upgrade configuration tasks run.
# - Else, if mode is "upgrade":
#     1. Optionally run pre-upgrade backup tasks.
#     2. Optionally run upgrade tasks (if upgrade_enabled is true) inside a block.
#        If any upgrade task fails and enable_rollback is true, the rescue section triggers restore tasks.
#     3. The always section runs post-upgrade configuration tasks.
# - If mode is "restore": only the restore tasks are executed.

- name: Load installation flags from installation_flags.yml
  include_vars: "installation_flags.yml"

- name: Run only configuration tasks if only_config is true
  import_tasks: post_configs.yml
  when: only_config | default(false)

- name: Run upgrade process if not only_config and mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)

    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere (optional)
      import_tasks: upgrade.yml
      when: upgrade_enabled | default(true)
  rescue:
    - name: Upgrade process failed - rollback disabled message
      debug:
        msg: "Upgrade failed. Rollback is disabled."
      when: not (enable_rollback | default(true))
    - name: Upgrade process failed; executing restore tasks for rollback
      import_tasks: restore.yml
      when: enable_rollback | default(true)
  always:
    - name: Run post-upgrade configuration tasks
      import_tasks: post_configs.yml
  when: (mode == "upgrade") and not (only_config | default(false))

- name: Run only restore tasks if not only_config and mode is "restore"
  import_tasks: restore.yml
  when: (mode == "restore") and not (only_config | default(false))
Explanation & Features:

Loading External Flags:
The role begins by loading external installation flags.
Mode & Only Configuration:
If only_config is true, only post‑configuration tasks run.
In "upgrade" mode, the block runs pre‑upgrade backup and (if enabled) upgrade tasks. If a failure occurs and rollback is enabled, the rescue section executes restore tasks.
The always section runs post‑upgrade configuration tasks.
If mode is "restore", only restore tasks are executed.
4. upgrade_ibm/tasks/backup.yml
yaml
Copy
---
# Backup tasks for IBM WebServer and IBM WebSphere.
# We use include_tasks with a loop to process each source directory individually.
- name: Process WebServer backup for each source directory
  include_tasks: process_webserver_backup.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere backup for each source directory
  include_tasks: process_websphere_backup.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Looping with include_tasks:
Instead of a loop directly on a block, each source directory is processed via an include_tasks call.
Conditional Execution:
The tasks execute only if the appropriate component is installed.
5. upgrade_ibm/tasks/process_webserver_backup.yml
yaml
Copy
---
- name: Check if source directory {{ ws_src }} exists (WebServer)
  stat:
    path: "{{ ws_src }}"
  register: ws_source_stat

- name: Ensure target backup directory exists for {{ ws_src | basename }} (WebServer)
  file:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    state: directory
    mode: '0755'
  when: ws_source_stat.stat.exists

- name: Archive {{ ws_src }} (WebServer) using tar
  command: tar -cf "{{ webserver_backup_dir }}/{{ ws_src | basename }}/{{ ws_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ ws_src }}"
  when: ws_source_stat.stat.exists

- name: Find existing backups for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: ws_existing_backups
  when: ws_source_stat.stat.exists

- name: Set remove_count for WebServer backups for {{ ws_src | basename }}
  set_fact:
    remove_count: "{{ (ws_existing_backups.files | default([]) | length | int) - (backup_retain | int) }}"
  when: ws_source_stat.stat.exists

- name: Remove old WebServer backups for {{ ws_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ (ws_existing_backups.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: item
  when: ws_source_stat.stat.exists and 
        (ws_existing_backups.files | default([]) | length | int) > (backup_retain | int) and 
        (remove_count | int) > 0
Explanation & Features:

Tar Archive:
Uses the command module to run tar -cf and create an archive.
Safe Cleanup:
Computes remove_count as the difference between the total backup files and the retention count, then slices the sorted list safely.
Conditional Checks:
The removal task runs only if there are more backups than the retention limit.
6. upgrade_ibm/tasks/process_websphere_backup.yml
yaml
Copy
---
- name: Check if source directory {{ wsphere_src }} exists (WebSphere)
  stat:
    path: "{{ wsphere_src }}"
  register: wsphere_source_stat

- name: Ensure target backup directory exists for {{ wsphere_src | basename }} (WebSphere)
  file:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    state: directory
    mode: '0755'
  when: wsphere_source_stat.stat.exists

- name: Archive {{ wsphere_src }} (WebSphere) using tar
  command: tar -cf "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}/{{ wsphere_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ wsphere_src }}"
  when: wsphere_source_stat.stat.exists

- name: Find existing backups for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: wsphere_existing_backups
  when: wsphere_source_stat.stat.exists

- name: Set remove_count for WebSphere backups for {{ wsphere_src | basename }}
  set_fact:
    remove_count: "{{ (wsphere_existing_backups.files | default([]) | length | int) - (backup_retain | int) }}"
  when: wsphere_source_stat.stat.exists

- name: Remove old WebSphere backups for {{ wsphere_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ (wsphere_existing_backups.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: item
  when: wsphere_source_stat.stat.exists and 
        (wsphere_existing_backups.files | default([]) | length | int) > (backup_retain | int) and 
        (remove_count | int) > 0
Explanation & Features:

Similar Logic for WebSphere:
Same as WebServer backup but for WebSphere source directories.
Safe Cleanup:
Ensures older backups are removed based on the retention count.
7. upgrade_ibm/tasks/upgrade.yml
yaml
Copy
---
# Upgrade tasks for IBM WebServer and IBM WebSphere.
# Replace these debug tasks with your actual upgrade installer commands or scripts.
- name: Upgrade IBM WebServer Block
  block:
    - name: Execute upgrade commands for WebServer (example)
      debug:
        msg: "Upgrading IBM WebServer on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebServer
      debug:
        msg: "Running WebServer post-upgrade configuration on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Upgrade IBM WebSphere Block
  block:
    - name: Execute upgrade commands for WebSphere (example)
      debug:
        msg: "Upgrading IBM WebSphere on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebSphere
      debug:
        msg: "Running WebSphere post-upgrade configuration on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Placeholder Upgrade Tasks:
These are example tasks. Replace the debug messages with your actual upgrade logic.
Conditional Execution:
Each block runs only if the corresponding component is installed.
8. upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# Uses include_tasks with loops to process each source directory individually.
- name: Process WebServer restore for each source directory
  include_tasks: process_webserver_restore.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere restore for each source directory
  include_tasks: process_websphere_restore.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Include Tasks for Restore:
Restores are handled per source directory using include_tasks with loops, ensuring better compatibility across Ansible versions.
Conditional Execution:
Runs only for components marked as installed.
9. upgrade_ibm/tasks/process_webserver_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ ws_src | basename }} (WebServer)
  stat:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ ws_src | basename }} (WebServer) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ ws_src | basename }} (WebServer) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ ws_src | basename }} (WebServer)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ ws_src }} (WebServer)
  shell: rm -rf "{{ ws_src }}"
  retries: 5
  delay: 10
  register: rm_result
  until: rm_result.rc == 0
  when: latest_backup is defined

- name: Recreate directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ ws_src | basename }} (WebServer)
  command: tar -xf "{{ latest_backup }}" -C "{{ ws_src }}"
  when: latest_backup is defined

- name: Set remove_count for older WebServer backups for {{ ws_src | basename }} (Restore)
  set_fact:
    remove_count: "{{ (backup_files.files | default([]) | length | int) - 1 }}"
  when: backup_files.files | length > 1

- name: Clean up older backups for {{ ws_src | basename }} (WebServer) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ (backup_files.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1 and (remove_count | int) > 0
Explanation & Features:

Restoration Using Tar:
Uses the command module (tar -xf) to extract the latest backup.
Safe Directory Removal:
Uses the shell module with rm -rf along with retries and delay to remove the current directory even if it’s busy.
Cleanup of Older Backups:
Computes a remove_count and safely slices the list of backup files to remove older backups.
Conditional Checks:
Each step runs only if the backup target exists and backup files are found.
10. upgrade_ibm/tasks/process_websphere_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ wsphere_src | basename }} (WebSphere)
  stat:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ wsphere_src | basename }} (WebSphere) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ wsphere_src | basename }} (WebSphere) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ wsphere_src | basename }} (WebSphere)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ wsphere_src }} (WebSphere)
  shell: rm -rf "{{ wsphere_src }}"
  retries: 5
  delay: 10
  register: rm_result
  until: rm_result.rc == 0
  when: latest_backup is defined

- name: Recreate directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ wsphere_src | basename }} (WebSphere)
  command: tar -xf "{{ latest_backup }}" -C "{{ wsphere_src }}"
  when: latest_backup is defined

- name: Set remove_count for older WebSphere backups for {{ wsphere_src | basename }} (Restore)
  set_fact:
    remove_count: "{{ (backup_files.files | default([]) | length | int) - 1 }}"
  when: backup_files.files | length > 1

- name: Clean up older backups for {{ wsphere_src | basename }} (WebSphere) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ (backup_files.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1 and (remove_count | int) > 0
Explanation & Features:

Similar Logic for WebSphere Restore:
Applies the same approach as the WebServer restore tasks using tar for extraction.
Forced Removal with Retries:
Uses the shell module with rm -rf to force remove directories with retries/delays to handle busy resources.
Safe Cleanup:
Computes remove_count and removes older backups safely.
11. upgrade_ibm/tasks/post_configs.yml
yaml
Copy
---
# Post-upgrade configuration tasks.
# These tasks run in the always section of the main block,
# regardless of whether the upgrade succeeded or failed.
- name: Run post-upgrade configuration for IBM WebServer
  debug:
    msg: "Applying post-upgrade configuration for IBM WebServer on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Run post-upgrade configuration for IBM WebSphere
  debug:
    msg: "Applying post-upgrade configuration for IBM WebSphere on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Post-Configuration Tasks:
These tasks run regardless of upgrade outcome (via the always section) to apply any final configuration steps.
Conditional Execution:
They run only for installed components.
12. upgrade_ibm_playbook.yml
yaml
Copy
---
- name: Upgrade IBM WebServer and IBM WebSphere with Backup/Restore and Optional Config Only
  hosts: aix_servers
  gather_facts: yes
  vars:
    # Override variables if needed.
    backup_dir: "/install/BAW/backups"
    env: "production"
    baw_user: "bawuser"
    webserver_tar_dir:
      - /opt/ihs/85
      - /opt/websphere/85
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc
    websphere_tar_dir:
      - /opt/wps8/websphere/
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc

    # Installation flags (or use external installation_flags.yml)
    baw_installed: false
    websphere_installed: true
    ihs_installed: false
    plugin_installed: true

    # Upgrade control.
    pre_upgrade_backup: true
    enable_rollback: true
    upgrade_enabled: true

    # Mode control:
    # "upgrade" runs the full upgrade process,
    # "restore" runs only the restore tasks.
    mode: "upgrade"

    # Only configuration mode:
    # When true, only the post-upgrade configuration tasks run.
    only_config: false
  roles:
    - upgrade_ibm
Explanation & Features:

Sample Playbook:
This playbook demonstrates how to run the role on your target hosts, with overrides for variables.
Control Variables:
By adjusting mode, only_config, upgrade_enabled, and enable_rollback, you control which parts of the role execute.
Final Role Overview
vars/main.yml:
Sets all global variables including backup paths (with ansible_hostname), source directories, retention limits, and control variables. The installation flags can be overridden by installation_flags.yml.

installation_flags.yml:
Contains external installation flag settings.

tasks/main.yml:
Orchestrates the overall workflow:

Loads installation flags.
If only_config is true, runs only post‑configuration tasks.
If in "upgrade" mode, runs backup (if enabled) and upgrade tasks (if enabled) inside a block/rescue/always structure, with automatic rollback if enabled.
If in "restore" mode, runs only restore tasks.
tasks/backup.yml:
Uses include_tasks with a loop to process each source directory for backup.

tasks/process_webserver_backup.yml & tasks/process_websphere_backup.yml:
Contain backup logic using tar (via the command module) and clean up old backups safely using a computed remove_count.

tasks/upgrade.yml:
Contains placeholder upgrade tasks to be replaced with your actual upgrade commands.

tasks/restore.yml:
Uses include_tasks with a loop to process restore operations for each source directory.

tasks/process_webserver_restore.yml & tasks/process_websphere_restore.yml:
Handle restore logic:

Check for the backup folder.
Find and select the latest backup.
Remove the current directory using a shell command with retries (to avoid “resource busy” errors).
Recreate the directory and extract the backup.
Clean up older backups safely.
tasks/post_configs.yml:
Contains post‑upgrade configuration tasks that always run.

upgrade_ibm_playbook.yml:
A sample playbook that shows how to invoke the role with variable overrides.

This final role provides a robust, flexible upgrade workflow that uses tar for backup and restore, handles busy directories with retries, supports per‑host backup isolation, and offers complete control via variables for upgrade, rollback, and configuration tasks.
