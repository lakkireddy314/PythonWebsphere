📂 Directory Structure
css
Copy
venafi_cert_renew/
├── group_vars/
│   └── prod.yml
├── vars/
│   └── main.yml
├── handlers/
│   └── main.yml
├── tasks/
│   ├── main.yml
│   ├── download_local_cert.yml
│   ├── check_cert_expiry.yml
│   ├── locate_configs.yml
│   ├── extract_values.yml
│   ├── extract_one_conf.yml
│   ├── process_cert.yml      # Consolidated per‑alias logic
│   ├── cleanup.yml
│   └── send_report.yml
└── README.md
1. group_vars/prod.yml
yaml
Copy
httpd_pickup_ids:
  "/opt/ihs/conf/test1.conf": "cert_alias_test1"
  "/opt/ihs/conf/test2.conf": "cert_alias_test2"
This mapping drives both the certificate pickup and the HTTPD config parsing stages.

2. vars/main.yml
yaml
Copy
env: "prod"

# VCert CLI download/install
vcert_download_url: "https://localhost/Certs/vcert.zip"
vcert_install_dir:  "/tmp/vcert"
vcert_password:     "WEBASCh@ngeit"

# Venafi API credentials
venafi_access_token: "REPLACE_WITH_ACCESS_TOKEN"
venafi_pickupid:     "REPLACE_WITH_PICKUP_ID"

# Renewal threshold (days)
cert_renew_threshold: 90

# HTTPD restart settings
httpd_config_path:  "/opt/ihs/85/conf/httpd.conf"

# Dry‑run mode
report_only:        false
All tunable parameters are centralized, making the role easy to configure per environment.

3. handlers/main.yml
yaml
Copy
---
- name: "Renew PFX via VCert CLI"
  command: >
    {{ vcert_install_dir }}/vcert renew
      --alias {{ cert_alias }}
      --format pfx
      --password {{ vcert_password }}
      --chain full
      --output {{ vcert_install_dir }}/{{ cert_alias }}.pfx
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  args:
    creates: "{{ vcert_install_dir }}/{{ cert_alias }}.pfx"
  delegate_to: localhost
  tags:
    - renew
    - vcert-renew

- name: "Restart IBM HTTP Server"
  command: "/opt/ihs/85/bin/apachectl -f {{ httpd_config_path }} -k restart"
  listen: "cert_replaced"
  tags:
    - restart
Handler “Renew PFX via VCert CLI” runs once per notification, using the cert_alias fact set by tasks 
Ansible Documentation
.

creates: ensures idempotency—already‑existing PFX files are not re‑downloaded 
Ansible
.

4. tasks/main.yml
yaml
Copy
---
- include_tasks: download_local_cert.yml

- include_tasks: check_cert_expiry.yml
  when: any_pickup_success
  tags:
    - precheck

- name: "Skip if no certificates need renewal"
  meta: end_play
  when: venafi_cert_info
          | dict2items
          | selectattr('value.changed','equalto',true)
          | list
          | length == 0
  tags:
    - precheck

- include_tasks: locate_configs.yml

- include_tasks: extract_values.yml

- name: "Process each certificate end-to-end"
  include_tasks: process_cert.yml
  loop: "{{ cert_configs }}"
  loop_control:
    loop_var: cert_entry
    label: "{{ cert_entry.cert_alias }}"
  when:
    - not report_only
    - venafi_cert_info[cert_entry.cert_alias].changed
  tags:
    - process

- include_tasks: cleanup.yml

- include_tasks: send_report.yml
Loops are only on include_tasks, never on block—Ansible 2.9 compliant 
Ansible Documentation
.

The skip uses dict2items + selectattr to filter aliases needing renewal 
Ansible Documentation
.

5. tasks/download_local_cert.yml
yaml
Copy
---
- name: "Ensure VCert directory exists"
  file:
    path: "{{ vcert_install_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Download VCert CLI zip if missing"
  get_url:
    url: "{{ vcert_download_url }}"
    dest: "{{ vcert_install_dir }}/vcert.zip"
    creates: "{{ vcert_install_dir }}/vcert.zip"
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Unarchive VCert CLI idempotently"
  unarchive:
    src: "{{ vcert_install_dir }}/vcert.zip"
    dest: "{{ vcert_install_dir }}/"
    remote_src: yes
    creates: "{{ vcert_install_dir }}/vcert"
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Fetch PEM for each alias if missing"
  command: >
    {{ vcert_install_dir }}/vcert pickup
      --format pem
      --output {{ vcert_install_dir }}/{{ alias_entry.value }}.pem
      --pickup-id {{ alias_entry.value }}
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  args:
    creates: "{{ vcert_install_dir }}/{{ alias_entry.value }}.pem"
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: alias_entry
    label: "{{ alias_entry.key }}"
  register: pickup_results
  delegate_to: localhost
  tags:
    - precheck
    - vcert-pickup

- name: "Set any_pickup_success flag"
  set_fact:
    any_pickup_success: "{{ pickup_results.results
                           | selectattr('rc','equalto',0)
                           | list | length > 0 }}"
  tags:
    - precheck
Uses creates: to ensure CLI download and PEM pickup are idempotent 
Ansible Documentation
.

6. tasks/check_cert_expiry.yml
yaml
Copy
---
- name: "Initialize venafi_cert_info dict"
  set_fact:
    venafi_cert_info: {}
  tags:
    - precheck
    - expiry-check

- name: "Gather expiry-days & serial via Bash for each alias"
  shell: |
    exp=$(openssl x509 -enddate -noout \
         -in {{ vcert_install_dir }}/{{ alias_entry.value }}.pem \
         | cut -d= -f2)
    days=$(( ( $(date -d "$exp" +%s) - $(date +%s) ) / 86400 ))
    serial=$(openssl x509 -in {{ vcert_install_dir }}/{{ alias_entry.value }}.pem \
           -serial -noout | cut -d= -f2)
    echo "{{ alias_entry.value }} $days $serial"
  args:
    executable: /bin/bash
  register: expiry_results
  changed_when: false
  delegate_to: localhost
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: alias_entry
    label: "{{ alias_entry.key }}"
  tags:
    - precheck
    - expiry-check

- name: "Build venafi_cert_info from results"
  set_fact:
    venafi_cert_info: >-
      {{
        venafi_cert_info | default({}) | combine({
          (res_entry.stdout.split()[0]): {
            "expiry_days": (res_entry.stdout.split()[1] | int),
            "serial":      (res_entry.stdout.split()[2]),
            "changed":     ((res_entry.stdout.split()[1] | int) <= cert_renew_threshold)
          }
        })
      }}
  loop: "{{ expiry_results.results }}"
  loop_control:
    loop_var: res_entry
    label: "{{ res_entry.stdout.split()[0] }}"
  tags:
    - precheck
    - expiry-check

- name: "Debug venafi_cert_info"
  debug:
    var: venafi_cert_info
  tags:
    - precheck
    - expiry-check
Offloads all date arithmetic to Bash, avoiding Jinja2 timestamp issues 
Spacelift
.

7. tasks/locate_configs.yml
yaml
Copy
---
- name: "Build list of HTTPD configs"
  set_fact:
    bpm_conf_files: "{{ httpd_pickup_ids | dict2items }}"
  tags:
    - config-discovery
Simple conversion of a dict to list for subsequent parsing.

8. tasks/extract_values.yml
yaml
Copy
---
- name: "Initialize cert_configs list"
  set_fact:
    cert_configs: []
  tags:
    - extract
    - config-parse

- name: "Extract cert entries from each HTTPD config"
  include_tasks: extract_one_conf.yml
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: conf_entry
    label: "{{ conf_entry.key }}"
  tags:
    - extract
    - config-parse
Loops at include_tasks level, never on a block 
Ansible Documentation
.

9. tasks/extract_one_conf.yml
yaml
Copy
---
- name: "Check that {{ conf_entry.key }} exists"
  stat:
    path: "{{ conf_entry.key }}"
  register: conf_stat
  changed_when: false
  tags:
    - extract
    - config-parse

- name: "Skip {{ conf_entry.key }} if missing"
  debug:
    msg: "File {{ conf_entry.key }} not found, skipping."
  when: not conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract Keyfile paths"
  shell: |
    grep -E '^[[:space:]]*Keyfile' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed -E 's/^[[:space:]]*Keyfile[[:space:]]*=?[[:space:]]*//'
  register: keyfiles_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract SSLServerCert aliases"
  shell: |
    grep -E '^[[:space:]]*SSLServerCert' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed -E 's/^[[:space:]]*SSLServerCert[[:space:]]*=?[[:space:]]*//'
  register: ssl_aliases_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract first Listen port"
  shell: |
    grep -E '^[[:space:]]*Listen' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | head -n1 \
      | sed -E 's/^[[:space:]]*Listen[[:space:]]+([0-9]+).*/\1/'
  register: listen_ports_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Append each Keyfile entry to cert_configs"
  set_fact:
    cert_configs: "{{ cert_configs + [ {
      'config_file': conf_entry.key,
      'kdb_file':    kdb,
      'cert_alias':  conf_entry.value,
      'listen_port': (listen_ports_result.stdout | default('443'))
    } ] }}"
  loop: "{{ keyfiles_result.stdout_lines | default([]) }}"
  loop_control:
    loop_var: kdb
  when:
    - conf_stat.stat.exists
    - keyfiles_result.stdout_lines | length > 0
  tags:
    - extract
    - config-parse

- name: "Debug parsed entries"
  debug:
    msg: >-
      Keyfiles={{ keyfiles_result.stdout_lines | default([]) }},
      SSLServerCerts={{ ssl_aliases_result.stdout_lines | default([]) }},
      ListenPort={{ listen_ports_result.stdout | default('443') }}
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse
Uses grep + sed to reliably strip directive names and comments 
Red Hat Communities of Practice
.

10. tasks/process_cert.yml
yaml
Copy
---
# Per‑alias end-to-end processing without any loops on blocks

- name: "Set cert_alias fact"
  set_fact:
    cert_alias: "{{ cert_entry.cert_alias }}"
  tags:
    - process

- name: "Notify handler to renew PFX"
  meta: noop
  notify: "Renew PFX via VCert CLI"
  tags:
    - process

- name: "Flush handlers for renewal"
  meta: flush_handlers
  tags:
    - process

- name: "Backup existing KDB"
  copy:
    src: "{{ cert_entry.kdb_file }}"
    dest: "/install/MWVenafi/{{ env }}/{{ ansible_hostname }}/{{ cert_entry.kdb_file | basename }}"
    backup: yes
  tags:
    - process

- name: "Deploy renewed PFX"
  copy:
    src: "{{ vcert_install_dir }}/{{ cert_entry.cert_alias }}.pfx"
    dest: "/tmp/vcert/{{ cert_entry.cert_alias }}.pfx"
  delegate_to: localhost
  tags:
    - process

- name: "Replace certificate in KDB"
  command: >
    {{ vcert_install_dir }}/vcert replace
      --alias {{ cert_entry.cert_alias }}
      --pfx /tmp/vcert/{{ cert_entry.cert_alias }}.pfx
      --db {{ cert_entry.kdb_file }}
      --password {{ vcert_password }}
  tags:
    - process

- name: "Trigger HTTP server restart"
  meta: flush_handlers
  notify: "cert_replaced"
  tags:
    - process

- name: "Validate network serial"
  shell: |
    echo | openssl s_client
      -servername {{ ansible_hostname }}
      -connect {{ ansible_hostname }}:{{ cert_entry.listen_port }}
      2>/dev/null | openssl x509 -noout -serial
  register: net_serial
  changed_when: false
  tags:
    - process

- name: "Fail on serial mismatch"
  fail:
    msg: >
      Serial mismatch for {{ cert_entry.cert_alias }}:
      Venafi={{ venafi_cert_info[cert_entry.cert_alias].serial }}
      vs network={{ net_serial.stdout }}
  when: venafi_cert_info[cert_entry.cert_alias].serial != net_serial.stdout
  tags:
    - process
All per‑alias actions reside in one file, with no loops on any block structures 
Reddit
.

11. tasks/cleanup.yml
yaml
Copy
---
- name: "Cleanup VCert artifacts"
  file:
    path: "{{ vcert_install_dir }}"
    state: absent
  delegate_to: localhost
  run_once: true
  tags:
    - cleanup
Ensures the control node is left in a clean state.

12. tasks/send_report.yml
yaml
Copy
---
- name: "Compose certificate report"
  set_fact:
    comprehensive_report: |
      Venafi Cert Renewal Report ({{ 'DRY RUN' if report_only else 'EXECUTION' }})
      =====================================================
      Host: {{ ansible_hostname }}

      {% for alias, info in venafi_cert_info.items() %}
      - Alias: {{ alias }}
        Days Until Expiry: {{ info.expiry_days }}
        Serial: {{ info.serial }}
        Action: {{ 'Renewed' if info.changed else 'Skipped' }}
      {% endfor %}

- name: "Send email report"
  mail:
    host: "localhost"
    to: "web@test.com"
    subject: "Venafi Cert Renewal Report for {{ ansible_hostname }}"
    body: "{{ comprehensive_report }}"
  tags:
    - report
Always sends a run summary, even in dry‑run mode.

13. README.md
markdown
Copy
# venafi_cert_renew

## Overview
Automates IBM HTTP Server cert management using Venafi vcert CLI.

## Workflow
1. Download & install VCert CLI  
2. Pickup PEMs per alias  
3. Compute expiry & serial via Bash  
4. Parse HTTPD configs for Keyfile/KDB & port  
5. Loop per alias: renew → backup → replace → validate → restart  
6. Cleanup & email report  

## Usage
```yaml
- hosts: all
  roles:
    - venafi_cert_renew
Override variables in group_vars/vars/main.yml.

Use --tags to run specific stages.

Requirements
Ansible ≥ 2.9

openssl, bash on controller/hosts

License
MIT

markdown
Copy

---

### Key Benefits

- **No loops on blocks**: All iteration happens at the `include_tasks` level, fully compatible with Ansible 2.9 :contentReference[oaicite:10]{index=10}.  
- **Single per‑alias file**: `process_cert.yml` consolidates renew/backup/replace/validate logic.  
- **Handler‑driven actions**: Uses `meta: noop` + `notify` + `flush_handlers` for immediate, modular execution :contentReference[oaicite:11]{index=11}.  
- **Idempotency**: `creates:`, `changed_when: false`, and `backup:` guard every command.  
- **Clear loop_vars**: `alias_entry`, `conf_entry`, `cert_entry` replace generic `item` for readability :contentReference[oaicite:12]{index=12}.  
- **Robust parsing**: Shell-based `grep | sed` extracts config values reliably.  
- **Comprehensive reporting**: Always emails a summary of actions.  

This structure delivers a maintainable, Ansible 2.9–compatible role for large‑scale Venafi certificate automation.
::contentReference[oaicite:13]{index=13}





