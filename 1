- name: Run gskcmd to get cert details
  command: >-
    {{ gskcmd_path }}
    -cert -details
    -db "{{ keystore_file }}"
    -dbtype jks
    -pw "{{ keystore_password }}"
    -label "{{ certificate_label }}"
  register: cert_output
  changed_when: false

- name: Extract and normalize serial number (safe for Ansible 2.9)
  set_fact:
    cert_serial_number: >-
      {{ (
           # 1) find all capture-group matches (case-insensitive)
           cert_output.stdout
           | regex_findall(
               '(?i)Serial\\s*Number\\s*[:=]\\s*([0-9A-Fa-f\\s]+)'
             )
           # 2) if list is empty, default to [''] so [0] always exists
           | default([''], true)
         )[0]
         # 3) strip out spaces to get solid hex
         | replace(' ', '')
      }}

- name: Debug normalized serial
  debug:
    msg: "Normalized serial number: '{{ cert_serial_number }}'"

 
 
 - name: Parse serial number from gskcmd output
      set_fact:
        cert_serial_number: >-
          {{ cert_output.stdout
             | regex_search('Serial\\s*number\\s*[:=]\\s*([0-9A-Fa-f]+)', '\\1') }}

    - name: Show extracted serial number
      debug:
        msg: "Certificate serial number is {{ cert_serial_number }}"



- name: Build email subject into mail_subject
  set_fact:
    # Option A: join a list of strings
    mail_subject: "{{ ['Venafi Self Signed -', cert_records[0]['cell']] | join(' ') }}"
    # Option B: Python %-formatting
    # mail_subject: "{{ 'Venafi Self Signed - %s' % cert_records[0]['cell'] }}"



^\[\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3}\] \d+\s+\w+\s+(W|E)\s+.*

^\[(?<timestamp>\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3})\] \d+\s+\w+\s+(?<log_level>E|W)\s+(?<message>.*)


parse regex "^\[(?<timestamp>\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3})\] \d+\s+\w+\s+(?<log_level>E|W)\s+(?<message>.*)"


parse "[*] * * * *   *   *: *" as timestamp, thread_id, component, severity, error_code, error_message

#!/bin/bash

# Ensure that a file argument is passed
if [ -z "$1" ]; then
  echo "Usage: $0 <file>"
  exit 1
fi

# Set variables for RabbitMQ API endpoint, credentials, and queue name
RABBITMQ_API="http://localhost:15672/api/exchanges/%2f/amq.default/publish"
USER="guest" # RabbitMQ username (default is guest)
PASSWORD="guest" # RabbitMQ password (default is guest)
QUEUE_NAME="your_queue_name" # Name of your queue

# Read the content of the file provided as $1
MESSAGE=$(cat "$1")

# Post the message to the RabbitMQ queue using curl
curl -u $USER:$PASSWORD \
  -X POST \
  -H "Content-Type: application/json" \
  -d '{
        "properties": {},
        "routing_key": "'$QUEUE_NAME'",
        "payload": "'$MESSAGE'",
        "payload_encoding": "string"
      }' \
  $RABBITMQ_API

echo "Message sent to RabbitMQ queue '$QUEUE_NAME'"


Dear Team,

As my journey with [Company Name] comes to an end, I wanted to take a moment to express my heartfelt gratitude and bid you all farewell.

Working as a Middleware Engineer here has been an incredible experience. This role has been more than just a job—it has been an opportunity to learn, grow, and collaborate with some of the most talented and dedicated people I’ve ever met. From tackling complex challenges to celebrating team successes, I am proud of what we’ve achieved together.

To my team and colleagues, thank you for your unwavering support, collaboration, and the camaraderie that made every day enjoyable. Each of you has inspired me with your expertise, passion, and dedication, and I’m grateful to have been part of such a remarkable group.

Though I’m moving on to new opportunities, I’ll always carry with me the lessons learned and the memories created here. Please don’t hesitate to reach out—my email is [your personal email], and I’d love to stay connected on LinkedIn as well ([LinkedIn profile link]).

Wishing you all continued success, both professionally and personally. I’m excited to see the incredible things this team will accomplish in the future.

Thank you once again for everything.

Warm regards,
[Your Full Name]
