when: ((is_dmgr is defined) and (is_dmgr | bool)) or ((is_appserver is defined) and (is_appserver | bool))

- name: Set cell/nodeName for the matching row
      set_fact:
        cell: "{{ item[4] }}"
        nodeName: "{{ item[1] }}"
      loop: "{{ host_port_list }}"
      when:
        - item | length >= 5
        - inventory_hostname == item[2]

    # Optional: guard to detect missing mapping for this host
    - name: Fail if no mapping found for this host (optional)
      fail:
        msg: "No host_port_list row for {{ inventory_hostname }}"
      when: cell is not defined or nodeName is not defined


def updateDmgrAdminHostSecure(cellName, nodeName, serverName, newAlias, sslAlias):
    """
    Endpoint scope (INBOUND) for WC_adminhost_secure.
    If certificateAlias is empty/missing -> do nothing.
    Else -> modify the SSL config alias (sslAlias) at ENDPOINT scope to use newAlias.
    """
    scope_ep = '(cell):%s:(node):%s:(server):%s:(endpoint):WC_adminhost_secure' % (
        cellName, nodeName, serverName
    )

    # 1) Fetch the INBOUND SSL config group for this endpoint
    try:
        grp = AdminTask.getSSLConfigGroup([
            '-scopeName', scope_ep,
            '-name', 'WC_adminhost_secure',
            '-direction', 'inbound'
        ])
    except:
        print 'INFO: getSSLConfigGroup(INBOUND) failed at %s; skipping.' % scope_ep
        return

    # 2) INLINE: extract ONLY certificateAlias from bracketed output
    cert_alias = ''
    if grp:
        # Normalize brackets to spaces, then split into tokens
        norm = grp.replace('[', ' ').replace(']', ' ').replace('{', ' ').replace('}', ' ')
        toks = [t for t in norm.split() if t]
        for i in range(len(toks) - 1):
            if toks[i] == 'certificateAlias':
                cert_alias = toks[i + 1]
                break

    # Treat empty/missing as "do nothing"
    if not cert_alias or cert_alias in ('None', 'none', 'NULL', 'null', '-'):
        print 'INFO: WC_adminhost_secure certificateAlias empty/null at %s; leaving unchanged.' % scope_ep
        return

    # 3) Re-point the SSL settings alias at ENDPOINT scope to the new key alias
    try:
        AdminTask.modifySSLConfig([
            '-alias', sslAlias,      # e.g. 'CellDefaultSSLSettings' or your alias_ssl_config var
            '-scopeName', scope_ep,  # endpoint scope (not cell scope)
            '-clientKeyAlias', newAlias,
            '-serverKeyAlias', newAlias
        ])
        AdminConfig.save()
        print 'INFO: Updated %s (WC_adminhost_secure inbound @ endpoint) to alias %s.' % (sslAlias, newAlias)
    except:
        print 'WARNING: modifySSLConfig failed for %s at %s; continuing.' % (sslAlias, scope_ep)



- name: Push dict to all hosts
      add_host:
        name: "{{ item }}"
        shared_dict: "{{ hostvars[inventory_hostname].shared_dict }}"
      loop: "{{ groups['all'] }}"


<td style="border-top:1px solid #ddd; text-align:right;">
  {{ ((ansible_date_time.epoch | int + entry.expiry_days | int * 86400)
      | to_datetime("%s")
      | strftime("%Y-%m-%d")) }}
</td>




- name: "Build venafi_cert_info with combine()"
  ansible.builtin.set_fact:
    venafi_cert_info: >-
      {{ venafi_cert_info
         | combine({
             (res.stdout.split()[0]): {
               expiry_days: (res.stdout.split()[1] | int),
               serial:      res.stdout.split()[2],
               changed:     ((res.stdout.split()[1] | int) <= cert_renew_threshold)
             }
           })
      }}
  loop: "{{ expiry_results.results }}"
  loop_control:
    loop_var: res
  delegate_to: localhost
  run_once: true
  tags: [precheck]


  


- name: Convert expiry date to epoch on AIX via Python
  shell: |
    /usr/bin/python << 'EOF'
import time, datetime
s = "{{ cert_expiry_raw }}"
dt = datetime.datetime.strptime(s, "%m/%d/%y %I:%M %p")
print(int(time.mktime(dt.timetuple())))
EOF
  args:
    warn: false
  register: cert_epoch

- name: Set fact for expiry in seconds
  set_fact:
    cert_expiry_seconds: "{{ cert_epoch.stdout | int }}"

   
   
   
   
   
   
   
   original_kdb_files: >-
      {{
        kdb_backups.files
        | map(attribute='path')
        | map('basename')
        | map('regex_replace','^(.+\\.(?:kdb|sth|rdb))\\..*$','\\1')
        | unique
        | list
      }}
  delegate_to: "{{ inve

- name: Build list of original KDB filenames (strip timestamp)
  ansible.builtin.set_fact:
    original_kdb_files: >-
      {{
        kdb_backups.files
        | map(attribute='path')
        | map('basename')
        | map('regex_replace','^(.*?\\.[^.]+)\\..*$','\\1')
        | unique
        | list
      }}
  delegate_to: "{{ inventory_hostname }}"
  tags:
    - restore


- name: Extract serial number via grep pipeline
  shell: >-
    {{ gskcmd_path }} -cert -details |
    grep -i 'Serial Number' |
    grep -oE '[0-9A-Fa-f ]+' |
    tr -d ' '
  register: cert_serial_raw
  changed_when: false
  failed_when: cert_serial_raw.rc != 0 or cert_serial_raw.stdout == ''

- name: Set cert_serial_number fact
  set_fact:
    cert_serial_number: "{{ cert_serial_raw.stdout }}"




- name: Run gskcmd to get full cert details
  command: >-
    {{ gskcmd_path }}
    -cert -details
    -db "{{ keystore_file }}"
    -dbtype jks
    -pw "{{ keystore_password }}"
    -label "{{ certificate_label }}"
  register: cert_output
  changed_when: false

- name: Keep only the top 15 lines of output
  set_fact:
    cert_output_top15: "{{ cert_output.stdout_lines[:15] | join('\n') }}"

- name: Debug — show the truncated output
  debug:
    msg: "{{ cert_output_top15 }}"

- name: Extract serial number and set fact (from truncated output)
  set_fact:
    cert_serial_number: >-
      "{{ (
           (cert_output_top15 | default(''))
           | regex_findall('(?i)Serial\\s*Number\\s*[:=]\\s*([0-9A-Fa-f\\s]+)')
           | default([''], true)
         )[0]
         | replace(' ', '')
      }}"

- name: Show normalized serial number
  debug:
    msg: "Serial = {{ cert_serial_number }}"


 
 
- name: Extract serial number into fact
  set_fact:
    ert_serial_number: >-
      {{ cert_output.stdout
         | regex_search('Serial\\s*number\\s*[:=]\\s*([0-9A-Fa-f]+)', '\\1') }}

- name: Debug serial
  debug:
    msg: "Extracted serial number is {{ ert_serial_number }}"

    - name: Show extracted serial number
      debug:
        msg: "Certificate serial number is {{ cert_serial_number }}"



- name: Build email subject into mail_subject
  set_fact:
    # Option A: join a list of strings
    mail_subject: "{{ ['Venafi Self Signed -', cert_records[0]['cell']] | join(' ') }}"
    # Option B: Python %-formatting
    # mail_subject: "{{ 'Venafi Self Signed - %s' % cert_records[0]['cell'] }}"



^\[\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3}\] \d+\s+\w+\s+(W|E)\s+.*

^\[(?<timestamp>\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3})\] \d+\s+\w+\s+(?<log_level>E|W)\s+(?<message>.*)


parse regex "^\[(?<timestamp>\d{2}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}:\d{3} [A-Z]{3})\] \d+\s+\w+\s+(?<log_level>E|W)\s+(?<message>.*)"


parse "[*] * * * *   *   *: *" as timestamp, thread_id, component, severity, error_code, error_message

#!/bin/bash

# Ensure that a file argument is passed
if [ -z "$1" ]; then
  echo "Usage: $0 <file>"
  exit 1
fi

# Set variables for RabbitMQ API endpoint, credentials, and queue name
RABBITMQ_API="http://localhost:15672/api/exchanges/%2f/amq.default/publish"
USER="guest" # RabbitMQ username (default is guest)
PASSWORD="guest" # RabbitMQ password (default is guest)
QUEUE_NAME="your_queue_name" # Name of your queue

# Read the content of the file provided as $1
MESSAGE=$(cat "$1")

# Post the message to the RabbitMQ queue using curl
curl -u $USER:$PASSWORD \
  -X POST \
  -H "Content-Type: application/json" \
  -d '{
        "properties": {},
        "routing_key": "'$QUEUE_NAME'",
        "payload": "'$MESSAGE'",
        "payload_encoding": "string"
      }' \
  $RABBITMQ_API

echo "Message sent to RabbitMQ queue '$QUEUE_NAME'"


Dear Team,

As my journey with [Company Name] comes to an end, I wanted to take a moment to express my heartfelt gratitude and bid you all farewell.

Working as a Middleware Engineer here has been an incredible experience. This role has been more than just a job—it has been an opportunity to learn, grow, and collaborate with some of the most talented and dedicated people I’ve ever met. From tackling complex challenges to celebrating team successes, I am proud of what we’ve achieved together.

To my team and colleagues, thank you for your unwavering support, collaboration, and the camaraderie that made every day enjoyable. Each of you has inspired me with your expertise, passion, and dedication, and I’m grateful to have been part of such a remarkable group.

Though I’m moving on to new opportunities, I’ll always carry with me the lessons learned and the memories created here. Please don’t hesitate to reach out—my email is [your personal email], and I’d love to stay connected on LinkedIn as well ([LinkedIn profile link]).

Wishing you all continued success, both professionally and personally. I’m excited to see the incredible things this team will accomplish in the future.

Thank you once again for everything.

Warm regards,
[Your Full Name]
