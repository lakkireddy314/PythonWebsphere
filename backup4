Reasoned for a few seconds
Below is the complete, restructured role for upgrading IBM WebServer and IBM WebSphere that includes:

Host-specific backup directories (using ansible_hostname).
A block/rescue/always structure in main.yml that:
Optionally runs pre‑upgrade backup tasks.
Optionally runs upgrade tasks (controlled by the new variable upgrade_enabled).
Runs post‑upgrade configuration tasks in the always section.
In case of upgrade failure, if rollback is enabled, automatically executes the restore tasks.
A mode switch via the variable mode so that if you set mode: "restore", only the restore tasks run.
A new variable enable_rollback to optionally disable rollback.
The role folder structure is:

css
Copy
upgrade_ibm/
├── tasks
│   ├── main.yml
│   ├── backup.yml
│   ├── upgrade.yml
│   ├── restore.yml
│   └── post_configs.yml
└── vars
    └── main.yml
Below are the contents of each file along with detailed explanations.

1. File: upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging)
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# Installation flags (set true if the component is installed)
websphere_installed: true
baw_installed: false
ihs_installed: false
plugin_installed: true

# Define a components list used by restore tasks.
# This aggregates component-specific details.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control:
# If true, perform a pre-upgrade backup.
pre_upgrade_backup: true

# Rollback control:
# Set enable_rollback to true to run restore tasks in case of an upgrade failure.
# Set it to false to disable automatic rollback.
enable_rollback: true

# Optional upgrade tasks control:
# Set upgrade_enabled to true to run upgrade tasks (default) or false to skip them.
upgrade_enabled: true

# Mode control:
# Set mode to "upgrade" to run the upgrade process (with backup, optional upgrade tasks,
# automatic rollback on failure, and post-upgrade configuration),
# or set mode to "restore" to run only the restore tasks.
mode: "upgrade"
Explanation:

Backup and Environment Variables:
Defines where backups are stored and includes the environment and user.
Target Directories:
The backup directories now include {{ ansible_hostname }} so each host has its own backup folder.
Source Directories:
Lists of directories to archive for WebServer and WebSphere.
Retention and Flags:
Sets the retention count and installation flags.
Components List:
Aggregates details for restore tasks—each component includes its name, source directories (tar_dirs), target backup directory, and an installed flag.
Control Variables:
pre_upgrade_backup, enable_rollback, and upgrade_enabled control backup, rollback, and whether upgrade tasks run.
Mode:
Determines whether to run the full upgrade process or only restore tasks.
2. File: upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
# Mode control:
#   - If mode is "upgrade":
#       1. Optionally run pre-upgrade backup tasks.
#       2. Optionally run upgrade tasks (if upgrade_enabled is true) inside a block.
#          If any upgrade task fails and enable_rollback is true,
#          the rescue section triggers the restore tasks (rollback).
#       3. The always section runs post-upgrade configuration tasks.
#
#   - If mode is "restore": only the restore tasks are executed.

- name: Run only restore tasks if mode is "restore"
  block:
    - name: Running restore tasks only (mode=restore)
      import_tasks: restore.yml
  when: mode == "restore"

- name: Run upgrade process if mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)

    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere (optional)
      import_tasks: upgrade.yml
      when: upgrade_enabled | default(true)
  rescue:
    - name: Upgrade process failed - rollback disabled message
      debug:
        msg: "Upgrade failed. Rollback is disabled."
      when: not (enable_rollback | default(true))
    - name: Upgrade process failed; executing restore tasks for rollback
      import_tasks: restore.yml
      when: enable_rollback | default(true)
  always:
    - name: Run post-upgrade configuration tasks
      import_tasks: post_configs.yml
  when: mode == "upgrade"
Explanation:

Mode “restore”:
If mode is set to "restore", only the restore tasks are executed.
Mode “upgrade”:
When mode is "upgrade", the role:
Runs pre‑upgrade backup tasks if enabled.
Optionally runs upgrade tasks based on upgrade_enabled.
Uses a block/rescue structure:
If an upgrade task fails and rollback is enabled (enable_rollback is true), the restore tasks run.
If rollback is disabled, a debug message is output.
The always section then runs post‑upgrade configuration tasks (from post_configs.yml).
3. File: upgrade_ibm/tasks/backup.yml
yaml
Copy
---
# Backup tasks for IBM WebServer and IBM WebSphere.
# For each source directory defined in webserver_tar_dir and websphere_tar_dir:
#   1. Check if the source directory exists.
#   2. Create a host- and component-specific backup subdirectory (using the source's basename)
#      under the appropriate target backup directory.
#   3. Archive the source into a timestamped tar file.
#   4. Remove older backup files beyond the retention count.

- name: Backup IBM WebServer directories
  block:
    - name: Process WebServer source directory {{ item }} for backup
      block:
        - name: Check if source directory {{ item }} exists (WebServer)
          stat:
            path: "{{ item }}"
          register: ws_source_stat

        - name: Ensure target backup directory exists for {{ item | basename }} (WebServer)
          file:
            path: "{{ webserver_backup_dir }}/{{ item | basename }}"
            state: directory
            mode: '0755'
          when: ws_source_stat.stat.exists

        - name: Archive {{ item }} (WebServer)
          archive:
            path: "{{ item }}"
            dest: "{{ webserver_backup_dir }}/{{ item | basename }}/{{ item | basename }}_{{ ansible_date_time.iso8601_basic }}.tar"
            format: tar
          when: ws_source_stat.stat.exists

        - name: Find existing backups for {{ item | basename }} (WebServer)
          find:
            paths: "{{ webserver_backup_dir }}/{{ item | basename }}"
            patterns: "{{ item | basename }}_*.tar"
            file_type: file
          register: ws_existing_backups
          when: ws_source_stat.stat.exists

        - name: Remove old WebServer backups for {{ item | basename }} (retain {{ backup_retain }})
          file:
            path: "{{ old_backup.path }}"
            state: absent
          loop: "{{ ws_existing_backups.files | sort(attribute='mtime') | list | slice(0, ws_existing_backups.files | length - backup_retain) }}"
          loop_control:
            loop_var: old_backup
          when: ws_source_stat.stat.exists and (ws_existing_backups.files | length > backup_retain)
      loop: "{{ webserver_tar_dir }}"
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Backup IBM WebSphere directories
  block:
    - name: Process WebSphere source directory {{ item }} for backup
      block:
        - name: Check if source directory {{ item }} exists (WebSphere)
          stat:
            path: "{{ item }}"
          register: wsphere_source_stat

        - name: Ensure target backup directory exists for {{ item | basename }} (WebSphere)
          file:
            path: "{{ websphere_backup_dir }}/{{ item | basename }}"
            state: directory
            mode: '0755'
          when: wsphere_source_stat.stat.exists

        - name: Archive {{ item }} (WebSphere)
          archive:
            path: "{{ item }}"
            dest: "{{ websphere_backup_dir }}/{{ item | basename }}/{{ item | basename }}_{{ ansible_date_time.iso8601_basic }}.tar"
            format: tar
          when: wsphere_source_stat.stat.exists

        - name: Find existing backups for {{ item | basename }} (WebSphere)
          find:
            paths: "{{ websphere_backup_dir }}/{{ item | basename }}"
            patterns: "{{ item | basename }}_*.tar"
            file_type: file
          register: wsphere_existing_backups
          when: wsphere_source_stat.stat.exists

        - name: Remove old WebSphere backups for {{ item | basename }} (retain {{ backup_retain }})
          file:
            path: "{{ old_backup.path }}"
            state: absent
          loop: "{{ wsphere_existing_backups.files | sort(attribute='mtime') | list | slice(0, wsphere_existing_backups.files | length - backup_retain) }}"
          loop_control:
            loop_var: old_backup
          when: wsphere_source_stat.stat.exists and (wsphere_existing_backups.files | length > backup_retain)
      loop: "{{ websphere_tar_dir }}"
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
For each source directory in the lists for WebServer and WebSphere:

The task checks if the directory exists.
It then creates a backup subdirectory (named using the source's basename) under the host-specific target backup directory.
A timestamped archive is created.
Older archives beyond the retention count are deleted.
4. File: upgrade_ibm/tasks/upgrade.yml
yaml
Copy
---
# Upgrade tasks for IBM WebServer and IBM WebSphere.
# Replace the debug tasks below with your actual upgrade installer commands or scripts.

- name: Upgrade IBM WebServer Block
  block:
    - name: Execute upgrade commands for WebServer (example)
      debug:
        msg: "Upgrading IBM WebServer on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebServer
      debug:
        msg: "Running WebServer post-upgrade configuration on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Upgrade IBM WebSphere Block
  block:
    - name: Execute upgrade commands for WebSphere (example)
      debug:
        msg: "Upgrading IBM WebSphere on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebSphere
      debug:
        msg: "Running WebSphere post-upgrade configuration on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
These tasks serve as placeholders for your actual upgrade commands. They run only if the corresponding installation flags are true. Replace the debug messages with your upgrade logic.

5. File: upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# This file loops over each component in the components list and, for each source directory:
#   1. Checks if the host-specific backup target exists.
#   2. Finds backup archives matching the source directory’s basename.
#   3. Selects the latest backup archive.
#   4. Removes the current source directory, recreates it, and unarchives the backup.
#   5. Cleans up older backup archives.

- name: Restore backups for each component
  block:
    - name: Process component {{ comp.name }} for restore
      block:
        - name: Process source directory {{ src }} for restore in {{ comp.name }}
          block:
            - name: Check if backup target exists for {{ src | basename }} ({{ comp.name }})
              stat:
                path: "{{ comp.backup_dir }}/{{ src | basename }}"
              register: backup_target_stat

            - name: Skip restore for {{ src | basename }} ({{ comp.name }}) if no backup found on {{ ansible_hostname }}
              debug:
                msg: "No backup archive available for {{ src | basename }} ({{ comp.name }}) on {{ ansible_hostname }}."
              when: not backup_target_stat.stat.exists

            - name: Find backup files for {{ src | basename }} ({{ comp.name }})
              find:
                paths: "{{ comp.backup_dir }}/{{ src | basename }}"
                patterns: "{{ src | basename }}_*.tar"
                file_type: file
              register: backup_files
              when: backup_target_stat.stat.exists

            - name: Set latest backup file for {{ src | basename }} ({{ comp.name }})
              set_fact:
                latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
              when: backup_files.files | length > 0

            - name: Remove current directory {{ src }} ({{ comp.name }})
              file:
                path: "{{ src }}"
                state: absent
              when: latest_backup is defined

            - name: Recreate directory {{ src }} ({{ comp.name }})
              file:
                path: "{{ src }}"
                state: directory
                mode: '0755'
              when: latest_backup is defined

            - name: Restore from latest backup for {{ src | basename }} ({{ comp.name }})
              unarchive:
                src: "{{ latest_backup }}"
                dest: "{{ src }}"
                remote_src: yes
              when: latest_backup is defined

            - name: Clean up older backups for {{ src | basename }} ({{ comp.name }}) - keep only latest
              file:
                path: "{{ old_backup.path }}"
                state: absent
              loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
              loop_control:
                loop_var: old_backup
              when: backup_files.files | length > 1
          loop: "{{ comp.tar_dirs }}"
          loop_control:
            loop_var: src
      when: comp.installed
  loop: "{{ components }}"
  loop_control:
    loop_var: comp
Explanation:
This restore file loops over each component (from the components list). For each source directory:

It checks if the host-specific backup folder exists.
It finds backup files based on the directory basename.
It selects the latest backup.
It deletes the current directory, recreates it, and unarchives the latest backup.
It then removes older backup files, keeping only the latest.
6. File: upgrade_ibm/tasks/post_configs.yml
yaml
Copy
---
# Post-upgrade configuration tasks.
# These tasks run in the always section of the main block, regardless of upgrade success or failure.
# Use this file to apply any final configurations, validations, or notifications.

- name: Run post-upgrade configuration for IBM WebServer
  debug:
    msg: "Applying post-upgrade configuration for IBM WebServer on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Run post-upgrade configuration for IBM WebSphere
  debug:
    msg: "Applying post-upgrade configuration for IBM WebSphere on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
This file contains tasks that run after the upgrade process (in the always section). They apply any necessary post-upgrade configuration or validations. Replace the debug messages with your actual configuration tasks.

Final Role Overview
vars/main.yml:
Sets all global variables, including host-specific target directories (using ansible_hostname), source directories, retention count, component definitions, and control switches for pre-upgrade backup, rollback, and upgrade mode.

tasks/main.yml:
Orchestrates the overall workflow. Depending on the mode variable:

mode: "upgrade": Runs the upgrade process in a block/rescue/always structure, where:
Pre-upgrade backup tasks are optionally executed.
Upgrade tasks are optionally executed (controlled by upgrade_enabled).
If upgrade tasks fail and rollback is enabled (enable_rollback is true), the restore tasks are triggered.
Post-upgrade configuration tasks always run.
mode: "restore": Runs only the restore tasks.
tasks/backup.yml:
Processes each source directory (from webserver_tar_dir and websphere_tar_dir), creating a host-specific backup archive and cleaning up old backups.

tasks/upgrade.yml:
Contains the upgrade commands (currently placeholders) that you can replace with your actual upgrade logic.

tasks/restore.yml:
Loops over each component and its source directories, finds the latest backup, and restores it. Also cleans up older backup archives.

tasks/post_configs.yml:
Contains post-upgrade configuration tasks that run in the always section.

This restructured role gives you a robust, flexible upgrade workflow with the ability to:

Run full upgrade (with backup, optional upgrade tasks, rollback on failure, and post-configuration).
Run only restore tasks by setting mode: "restore".
Control whether rollback is automatically executed via enable_rollback.
Optionally disable upgrade tasks using upgrade_enabled.
Each host stores its own backups, ensuring that in environments with multiple servers, backups and restores are kept separate by hostname.
