Below is a proven, block‑free extraction workflow that reliably pulls Keyfile, SSLServerCert and Listen (non‑commented) directives from remote httpd.conf files, and populates cert_configs correctly. We:

Loop over your httpd_pickup_ids mapping with a custom conf_entry

Stat each file to ensure it exists

Shell‑grep the directives (avoiding complex Jinja regex pitfalls)

Assemble cert_configs via a simple list comprehension

Tag everything and guard with when: so re‑runs are idempotent and safe

tasks/extract_values.yml
yaml
Copy
---
- name: "Initialize cert_configs list"
  set_fact:
    cert_configs: []
  tags:
    - extract
    - config-parse

- name: "Extract certificate entries from HTTPD configs"
  include_tasks: extract_one_conf.yml
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: conf_entry
    label: "{{ conf_entry.key }}"
  tags:
    - extract
    - config-parse
tasks/extract_one_conf.yml
yaml
Copy
---
# Per‑config extraction (called via include_tasks with loop)

- name: "Check that {{ conf_entry.key }} exists"
  stat:
    path: "{{ conf_entry.key }}"
  register: conf_stat
  changed_when: false
  tags:
    - extract
    - config-parse

- name: "Skip {{ conf_entry.key }} if missing"
  debug:
    msg: "File {{ conf_entry.key }} not found; skipping."
  when: not conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract Keyfile paths from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*Keyfile' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed 's/.*=[[:space:]]*//'
  register: keyfiles_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract SSLServerCert values from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*SSLServerCert' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed 's/.*=[[:space:]]*//'
  register: ssl_aliases_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract first Listen port from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*Listen' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | head -n1 \
      | sed -E 's/.*[[:space:]]([0-9]+)$/\1/'
  register: listen_ports_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Append parsed entries for {{ conf_entry.key }}"
  set_fact:
    cert_configs: >-
      {{
        cert_configs 
        + [
            {
              'config_file': conf_entry.key,
              'kdb_file':    kdb,
              'cert_alias':  conf_entry.value,
              'listen_port': (listen_ports_result.stdout | default('443'))
            }
            for kdb in keyfiles_result.stdout_lines | default([])
          ]
      }}
  when:
    - conf_stat.stat.exists
    - keyfiles_result.stdout_lines is defined
    - keyfiles_result.stdout_lines | length > 0
  tags:
    - extract
    - config-parse

- name: "Debug: found {{ keyfiles_result.stdout_lines | default([]) | length }} cert entries in {{ conf_entry.key }}"
  debug:
    msg: >
      Keyfiles={{ keyfiles_result.stdout_lines | default([]) | list }},
      SSLServerCerts={{ ssl_aliases_result.stdout_lines | default([]) | list }},
      ListenPort={{ listen_ports_result.stdout | default('443') }}
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse
