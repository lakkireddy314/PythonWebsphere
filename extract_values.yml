# roles/venafi_cert_renew/tasks/extract_values.yml
---

- name: "Initialize cert_configs list"
  set_fact:
    cert_configs: []
  tags:
    - extract
    - config-parse

- name: "Process each HTTPD config for certificate info"
  vars:
    # Decode and expose for use in following tasks
    cfg_text: "{{ raw_conf.content | b64decode }}"
    keyfiles: >
      {{ cfg_text
         | regex_findall('(?m)^[ \\t]*Keyfile[ \\t]*=[ \\t]*(\\S+)') }}
    ssl_aliases: >
      {{ cfg_text
         | regex_findall('(?m)^[ \\t]*SSLServerCert[ \\t]*=[ \\t]*(\\S+)') }}
    listen_ports: >
      {{ cfg_text
         | regex_findall('(?m)^[ \\t]*Listen[ \\t]+(?:[\\w\\.]+:)?(\\d+)') }}
    default_port: "{{ (listen_ports[0] if listen_ports else '443') }}"
  block:
    - name: "Check that {{ conf_entry.key }} exists"
      stat:
        path: "{{ conf_entry.key }}"
      register: conf_stat

    - name: "Fetch {{ conf_entry.key }} from remote if present"
      slurp:
        src: "{{ conf_entry.key }}"
      register: raw_conf
      when: conf_stat.stat.exists

    - name: "Extract Keyfile, SSLServerCert, and Listen from {{ conf_entry.key }}"
      # No-op task to “activate” our vars block
      debug:
        msg: "Parsed {{ conf_entry.key }}"
      when: raw_conf is defined

    - name: "Append parsed entries to cert_configs"
      set_fact:
        cert_configs: >-
          {{
            cert_configs
            + [
                {
                  'config_file': conf_entry.key,
                  'kdb_file':    kdb,
                  'cert_alias':  conf_entry.value,
                  'listen_port': default_port
                }
                for kdb in keyfiles
              ]
          }}
      when:
        - raw_conf is defined
        - keyfiles | length > 0

  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: conf_entry
    label: "{{ conf_entry.key }}"
  tags:
    - extract
    - config‑parse

- name: "Show extracted cert_configs"
  debug:
    var: cert_configs
  tags:
    - extract
    - config‑parse
