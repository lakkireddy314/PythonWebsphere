# roles/venafi_cert_renew/tasks/extract_values.yml
---

- name: "Initialize cert_configs list"
  set_fact:
    cert_configs: []
  tags:
    - extract
    - config-parse

- name: "Slurp all HTTPD configs from remote hosts"
  slurp:
    src: "{{ conf_item.key }}"
  register: slurp_results
  delegate_to: localhost
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: conf_item
    label: "{{ conf_item.key }}"
  tags:
    - extract
    - config-parse

- name: "Combine slurp results with their config entries"
  set_fact:
    parsed_confs: >-
      {{ slurp_results.results
         | zip(httpd_pickup_ids | dict2items)
         | map('list')
         | map('community.general.dict',
               slurp=item.0,
               conf_entry=item.1)
         | list }}
  tags:
    - extract
    - config-parse

- name: "Parse each HTTPD config for Keyfile, SSLServerCert, Listen"
  set_fact:
    cert_configs: "{{ cert_configs + new_entries }}"
  vars:
    content: "{{ parsed_item.slurp.content | b64decode }}"
    keyfiles: >
      {{ content
         | regex_findall('(?m)^[ \\t]*Keyfile[ \\t]*=[ \\t]*(\\S+)') }}
    ssl_aliases: >
      {{ content
         | regex_findall('(?m)^[ \\t]*SSLServerCert[ \\t]*=[ \\t]*(\\S+)') }}
    listen_ports: >
      {{ content
         | regex_findall('(?m)^[ \\t]*Listen[ \\t]+(?:[\\w\\.]+:)?(\\d+)') }}
    new_entries: >-
      {{ keyfiles
         | zip(ssl_aliases, listen_ports)
         | map('list')
         | map('community.general.dict',
               config_file=parsed_item.conf_entry.key,
               kdb_file=item.0,
               cert_alias=parsed_item.conf_entry.value,
               listen_port=(item.2 if item.2 else '443')
             )
         | list }}
  loop: "{{ parsed_confs }}"
  loop_control:
    loop_var: parsed_item
    label: "{{ parsed_item.conf_entry.key }}"
  tags:
    - extract
    - config-parse

- name: "Debug final cert_configs"
  debug:
    var: cert_configs
  tags:
    - extract
    - config-parse
