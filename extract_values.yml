# roles/venafi_cert_renew/tasks/extract_one_conf.yml
---

- name: "Check that {{ conf_entry.key }} exists"
  stat:
    path: "{{ conf_entry.key }}"
  register: conf_stat
  changed_when: false
  tags:
    - extract
    - config-parse

- name: "Skip {{ conf_entry.key }} if missing"
  debug:
    msg: "File {{ conf_entry.key }} not found, skipping."
  when: not conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract Keyfile paths from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*Keyfile' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed -E 's/^[[:space:]]*Keyfile[[:space:]]*=?[[:space:]]*//'
  register: keyfiles_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract SSLServerCert values from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*SSLServerCert' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed -E 's/^[[:space:]]*SSLServerCert[[:space:]]*=?[[:space:]]*//'
  register: ssl_aliases_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract first Listen port from {{ conf_entry.key }}"
  shell: |
    grep -E '^[[:space:]]*Listen' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | head -n1 \
      | sed -E 's/^[[:space:]]*Listen[[:space:]]+(?:[[:alnum:]\.]+:)?([0-9]+).*/\1/'
  register: listen_ports_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Append parsed entries for {{ conf_entry.key }}"
  set_fact:
    cert_configs: >-
      {{
        cert_configs
        + [
            {
              'config_file': conf_entry.key,
              'kdb_file':    kdb,
              'cert_alias':  conf_entry.value,
              'listen_port': (listen_ports_result.stdout | default('443'))
            }
            for kdb in (keyfiles_result.stdout_lines | default([]))
          ]
      }}
  when:
    - conf_stat.stat.exists
    - (keyfiles_result.stdout_lines | default([])) | length > 0
  tags:
    - extract
    - config-parse


- name: "Debug: found entries in {{ conf_entry.key }}"
  debug:
    msg: >-
      Keyfiles={{ keyfiles_result.stdout_lines | default([]) }},
      SSLServerCerts={{ ssl_aliases_result.stdout_lines | default([]) }},
      ListenPort={{ listen_ports_result.stdout | default('443') }}
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse
