Below is the fully updated venafi_cert_renew role that eliminates the redundant httpd_confs list by iterating directly over your httpd_pickup_ids mapping. We use Ansible’s built‑in dict2items filter to convert that mapping into a loopable list of { key, value } pairs 
Ansible Documentation
Ansible Documentation
. This ensures a single source of truth for which HTTPD config requires which cert alias, reduces drift risk, and simplifies your playbooks 
The world's open source leader
. All other logic—downloading via VCert, local expiry/serial checks, conditional renewal, backup/replace, validation, server restart, cleanup, and reporting—remains as before.

Directory Structure
python
Copy
venafi_cert_renew/
├── group_vars/
│   └── prod.yml            # Defines httpd_pickup_ids mapping
├── handlers/
│   └── main.yml            # Restart handler
├── tasks/
│   ├── main.yml
│   ├── download_local_cert.yml
│   ├── check_local_cert.yml
│   ├── locate_configs.yml
│   ├── extract_values.yml
│   ├── renew_cert.yml
│   ├── backup_and_replace.yml
│   ├── restore_cert.yml
│   ├── cleanup.yml
│   └── send_report.yml
├── vars/
│   └── main.yml            # Centralized variables
└── README.md
1. vars/main.yml
All configuration, thresholds, credentials, and paths centralized.

yaml
Copy
---
env: "prod"

# Venafi API credentials
venafi_access_token: "REPLACE_WITH_ACCESS_TOKEN"
venafi_pickupid: "REPLACE_WITH_PICKUP_ID"

# Renewal threshold in days
cert_renew_threshold: 90

# VCert CLI download and install settings
vcert_download_url: "https://localhost/Certs/vcert.zip"
vcert_install_dir: "/tmp/vcert"
vcert_password: "WEBASCh@ngeit"

# Path to main HTTPD config for restart handler
httpd_config_path: "/opt/ihs/85/conf/httpd.conf"

# Dry‑run
report_only: false
2. group_vars/prod.yml
Defines the mapping from each HTTPD config file to its pickup‑ID (alias). No separate list needed!

yaml
Copy
---
httpd_pickup_ids:
  "/path/to/test1.conf": "custom_cert_alias_for_test1"
  "/path/to/test2.conf": "custom_cert_alias_for_test2"
3. handlers/main.yml
Restart IBM HTTP Server when certificates are replaced.

yaml
Copy
---
- name: "Restart IBM HTTP Server"
  command: "/opt/ihs/85/bin/apachectl -f {{ httpd_config_path }} -k restart"
  listen: "cert_replaced"
4. tasks/main.yml
Orchestrates pre‑check, conditional execution, and reporting.

yaml
Copy
---
- include_tasks: download_local_cert.yml

- include_tasks: check_local_cert.yml
  when: local_cert_info.changed

- name: "Skip host if certificate is valid > threshold"
  meta: end_play
  when: not local_cert_info.changed

- include_tasks: locate_configs.yml
- include_tasks: extract_values.yml
- include_tasks: renew_cert.yml
- include_tasks: backup_and_replace.yml
- include_tasks: restore_cert.yml

- include_tasks: cleanup.yml
  run_once: true
  delegate_to: localhost

- include_tasks: send_report.yml
  run_once: true
  delegate_to: localhost
5. tasks/download_local_cert.yml
Download each certificate locally via VCert pickup‑ID.

yaml
Copy
---
- name: "Ensure vcert install directory"
  file:
    path: "{{ vcert_install_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true

- name: "Get VCert CLI"
  get_url:
    url: "{{ vcert_download_url }}"
    dest: "{{ vcert_install_dir }}/vcert.zip"
  delegate_to: localhost
  run_once: true

- name: "Unarchive VCert CLI"
  unarchive:
    src: "{{ vcert_install_dir }}/vcert.zip"
    dest: "{{ vcert_install_dir }}/"
    remote_src: yes
  delegate_to: localhost
  run_once: true

- name: "Fetch cert PEM via VCert pickup"
  command: >
    {{ vcert_install_dir }}/vcert pickup
      --format pem
      --output {{ vcert_install_dir }}/cert.pem
      --pickup-id {{ item.value }}
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: item
    label: "{{ item.key }}"
  register: pickup_results
  delegate_to: localhost

- name: "Set local_cert_info.changed if any pickup succeeded"
  set_fact:
    local_cert_info:
      changed: "{{ pickup_results.results | selectattr('rc','equalto',0) | list | length > 0 }}"
6. tasks/check_local_cert.yml
Extract expiry and serial locally; decide whether to proceed.

yaml
Copy
---
- name: "Get cert expiry date"
  shell: |
    openssl x509 -enddate -noout -in {{ vcert_install_dir }}/cert.pem | cut -d= -f2
  register: cert_enddate
  delegate_to: localhost

- name: "Compute days until expiry"
  set_fact:
    cert_days_remaining: >-
      {{
        ((cert_enddate.stdout | to_datetime("%b %d %H:%M:%S %Y %Z")).timestamp()
         - (ansible_date_time.iso8601 | to_datetime).timestamp())
        / 86400 | round(0, 'floor') | int
      }}

- name: "Get local cert serial"
  shell: |
    openssl x509 -in {{ vcert_install_dir }}/cert.pem -serial -noout | cut -d= -f2
  register: cert_serial_local
  delegate_to: localhost

- name: "Record local_cert_info"
  set_fact:
    local_cert_info:
      expiry_days: "{{ cert_days_remaining }}"
      serial: "{{ cert_serial_local.stdout }}"
      changed: "{{ cert_days_remaining <= cert_renew_threshold }}"

- name: "Debug local cert status"
  debug:
    msg: >
      Local cert has {{ cert_days_remaining }} days left (serial {{ cert_serial_local.stdout }});
      will {{ 'renew' if local_cert_info.changed else 'skip' }} this host.
7. tasks/locate_configs.yml
Convert your mapping into a loopable list via dict2items. No httpd_confs needed! 
Ansible Documentation

yaml
Copy
---
- name: "Build list of HTTPD configs from mapping"
  set_fact:
    bpm_conf_files: "{{ httpd_pickup_ids | dict2items }}"
8. tasks/extract_values.yml
For each { key, value }, read the file, extract Keyfile/SSLServerCert/Listen, and apply the alias from the mapping. 
Ansible Documentation

yaml
Copy
---
- name: "Initialize cert_configs"
  set_fact:
    cert_configs: []

- name: "Extract entries from each HTTPD config"
  block:
    - name: "Slurp {{ item.key }}"
      slurp:
        src: "{{ item.key }}"
      register: conf_raw

    - name: "Decode content for {{ item.key }}"
      set_fact:
        file_content: "{{ conf_raw.content | b64decode }}"

    - name: "Build entries list"
      set_fact:
        cert_configs: "{{ cert_configs + new_entries }}"
      vars:
        keyfiles: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','Keyfile\\s*=\\s*(\\S+)')
             | reject('equalto',None)
             | list }}
        cert_aliases: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','SSLServerCert\\s*=\\s*(\\S+)')
             | reject('equalto',None)
             | list }}
        listen_ports: >-
          {{ file_content.splitlines()
             | reject('match','^\\s*#')
             | map('regex_search','^Listen\\s+(?:[\\w\\.]+:)?(\\d+)')
             | reject('equalto',None)
             | list }}
        new_entries: >-
          {{ keyfiles | zip(cert_aliases)
             | map('list')
             | map('community.general.dict',
                   config_file=item.key,
                   kdb_file=item0,
                   cert_alias=item.value,
                   listen_port=(listen_ports[0] if listen_ports|length>0 else '443')
                 ) | list }}
      loop: "{{ bpm_conf_files }}"
      loop_control:
        loop_var: item
  rescue:
    - debug: msg="Failed to process {{ item.key }}; skipping."
9. tasks/renew_cert.yml
Renew each unique alias via VCert only if not in dry‑run mode.

yaml
Copy
---
- name: "Gather aliases needing renewal"
  set_fact:
    renewal_aliases: >-
      {{ cert_configs
         | selectattr('days_until_expiry','defined')
         | selectattr('days_until_expiry','le',cert_renew_threshold)
         | map(attribute='cert_alias') | unique | list }}

- name: "Renew via VCert CLI"
  command: >
    {{ vcert_install_dir }}/vcert renew
      --alias {{ alias }}
      --format pfx
      --password {{ vcert_password }}
      --chain full
      --output {{ vcert_install_dir }}/{{ alias }}.pfx
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  loop: "{{ renewal_aliases }}"
  loop_control:
    loop_var: alias
  delegate_to: localhost
  register: renew_results
  when: not report_only
10. tasks/backup_and_replace.yml
Backup KDB, distribute PFX, replace, and trigger restart handler.

yaml
Copy
---
- name: "Backup & replace certificates in KDB"
  loop: "{{ cert_configs
             | selectattr('days_until_expiry','defined')
             | selectattr('days_until_expiry','le',cert_renew_threshold) }}"
  loop_control:
    loop_var: cert_entry
  block:
    - name: "Backup {{ cert_entry.kdb_file }}"
      copy:
        src: "{{ cert_entry.kdb_file }}"
        dest: "/install/MWVenafi/{{ env }}/{{ ansible_hostname }}/{{ cert_entry.kdb_file | basename }}"
        backup: yes

    - name: "Copy renewed PFX for {{ cert_entry.cert_alias }}"
      copy:
        src: "{{ vcert_install_dir }}/{{ cert_entry.cert_alias }}.pfx"
        dest: "/tmp/vcert/{{ cert_entry.cert_alias }}.pfx"
      delegate_to: localhost
      run_once: true

    - name: "Replace cert {{ cert_entry.cert_alias }}"
      command: >
        {{ vcert_install_dir }}/vcert replace
          --alias {{ cert_entry.cert_alias }}
          --pfx /tmp/vcert/{{ cert_entry.cert_alias }}.pfx
          --db {{ cert_entry.kdb_file }}
          --password {{ vcert_password }}
      register: replace_result

    - name: "Trigger restart handler"
      meta: flush_handlers
      notify: "cert_replaced"
11. tasks/restore_cert.yml
Post‑replacement validations: gsk8capicmd + OpenSSL s_client serial compare, restore on failure.

yaml
Copy
---
- name: "Validate replacements"
  loop: "{{ cert_configs
             | selectattr('days_until_expiry','defined')
             | selectattr('days_until_expiry','le',cert_renew_threshold) }}"
  loop_control:
    loop_var: cert_entry
  block:
    - name: "Check via gsk8capicmd"
      command: >
        /usr/bin/gsk8capicmd -cert -view
          -db {{ cert_entry.kdb_file }}
          -label {{ cert_entry.cert_alias }} -stashed
      register: new_info

    - name: "Get network serial via OpenSSL s_client"
      command: >
        echo | openssl s_client
          -servername {{ ansible_hostname }}
          -connect {{ ansible_hostname }}:{{ cert_entry.listen_port }}
          2>/dev/null | openssl x509 -noout -serial
      register: net_serial

    - name: "Fail on serial mismatch"
      fail:
        msg: >
          Serial mismatch for {{ cert_entry.cert_alias }}:
          KDB={{ new_info.stdout | regex_search('Serial Number:\\s*(\\S+)','\\1') }}
          vs network={{ net_serial.stdout }}
      when: >
        (new_info.stdout | regex_search('Serial Number:\\s*(\\S+)','\\1'))
        != net_serial.stdout
12. tasks/cleanup.yml
Remove all VCert artifacts from the control node.

yaml
Copy
---
- name: "Cleanup VCert directory"
  file:
    path: "{{ vcert_install_dir }}"
    state: absent
  delegate_to: localhost
  run_once: true
13. tasks/send_report.yml
Send a detailed email report every run.

yaml
Copy
---
- name: "Compose report"
  set_fact:
    comprehensive_report: |
      Venafi Cert Renewal Report ({{ 'DRY RUN' if report_only else 'EXECUTION' }})
      =====================================================
      Host: {{ ansible_hostname }}
      Cert Days Remaining: {{ cert_days_remaining }}
      Serial (local): {{ cert_serial_local.stdout }}
      Renewal Threshold: {{ cert_renew_threshold }} days
      Action: {{ 'Renewed' if cert_days_remaining <= cert_renew_threshold else 'Skipped' }}

- name: "Email report"
  mail:
    host: "localhost"
    to: "web@test.com"
    subject: "Cert Renewal Report for {{ ansible_hostname }}"
    body: "{{ comprehensive_report }}"
Features & Benefits
Single Source Mapping: Eliminates duplication—httpd_pickup_ids drives both which files to process and which alias to use 
Ansible Documentation
.

Simplified Looping: Uses ansible.builtin.dict2items to iterate keys/values; no separate list needed 
Ansible Documentation
.

Pre‑Check Optimization: Downloads and inspects cert locally via VCert + OpenSSL; skips hosts whose certs aren’t within the renewal window .

Threshold‑Based Control: cert_renew_threshold variable drives all decisions—modify in one place.

Robust Renewal Workflow: Backups, replacements, net validations (OpenSSL s_client), and serial matching ensure safety.

Handler‑Driven Restart: Only restarts HTTP Server when an actual replacement occurs.

Cleanup & Reporting: Removes all intermediate files and always emails a concise, rich report.

Dry‑Run Support: Flip report_only: true to verify behavior without touching targets.

This refactoring centralizes control in your httpd_pickup_ids mapping, removes redundancy, and leverages Ansible’s dict2items filter for clearer, more maintainable plays.
