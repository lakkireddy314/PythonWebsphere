Summary
Below is a single-play Ansible-2.9 playbook (“Option B”) that:

Runs your wsadmin Jython script on each WebSphere server to emit CSV lines.

Filters out unwanted lines (was_user, WASX7209I) via reject('search', …) 
Ansible Documentation
.

Builds a structured list by calling Python’s .split(',') in a loop (no split filter needed) 
Stack Overflow
.

Initializes ok_list and down_list once on the controller with run_once + delegate_to: localhost 
Crisp's Blog
.

Processes each server: retrieves the SSL serial, handles “server down” or “unable to load certificate” via wait_for and meta: end_host 
Ansible Documentation
Ansible Documentation
, then appends to ok_list or down_list on the controller via delegate_to.

Renders an Outlook-friendly HTML report and emails it, all from the controller 
Ansible Documentation
.

Main Playbook: validate_ssl_certificates.yml
yaml
Copy
Edit
---
- name: Validate SSL Certificates on WebSphere Servers and Report
  hosts: websphere_servers
  gather_facts: false

  vars:
    wsadmin_path:    /opt/IBM/WebSphere/AppServer/bin/wsadmin.sh
    jython_script:   /tmp/wsadmin_jython_script.py
    report_file:     /tmp/ssl_validation_report.html
    report_date:     "{{ lookup('pipe', 'date -u +%Y-%m-%d\\ %H:%M\\ UTC') }}"

  tasks:
    - name: Deploy wsadmin Jython script
      copy:
        src: wsadmin_jython_script.py
        dest: "{{ jython_script }}"
        mode: '0755'

    - name: Execute wsadmin script and capture output
      shell: "{{ wsadmin_path }} -lang jython -f {{ jython_script }}"
      register: wsadmin_output
      changed_when: false

    - name: Filter out unwanted wsadmin output
      set_fact:
        filtered_lines: >-
          {{ wsadmin_output.stdout_lines
             | reject('search','was_user')
             | reject('search','WASX7209I')
             | list }}                                                      # :contentReference[oaicite:5]{index=5}

    - name: Initialize report lists on controller
      run_once: true
      delegate_to: localhost
      set_fact:
        ok_list:   []
        down_list: []                                                   # :contentReference[oaicite:6]{index=6}

    - name: Initialize server list
      set_fact:
        servers: []

    - name: Build structured server list
      set_fact:
        servers: "{{ servers + [ ws_line.split(',') ] }}"
      loop: "{{ filtered_lines }}"
      loop_control:
        loop_var: ws_line
        label: "{{ ws_line }}"                                         # :contentReference[oaicite:7]{index=7}

    - name: Process each server entry
      include_tasks: tasks/ssl_checks.yml
      loop: "{{ servers }}"
      loop_control:
        loop_var: server_entry
        label: "{{ server_entry[2] }}"
      vars:
        server_name:     "{{ server_entry[2] }}"
        node_name:       "{{ server_entry[1] }}"
        host:            "{{ server_entry[3].split('.')[0] }}"
        port:            "{{ server_entry[4] | int }}"
        expected_serial: "{{ lookup('vars', host + '_cert_serial', default='') }}"

    - name: Generate & email SSL Validation Report
      run_once: true
      delegate_to: localhost
      include_tasks: tasks/report.yml
      vars:
        generated: "{{ report_date }}"
        report_file: "{{ report_file }}"
        ok_list:   "{{ ok_list }}"
        down_list: "{{ down_list }}"
Task File: tasks/ssl_checks.yml
yaml
Copy
Edit
---
- name: Retrieve SSL certificate serial number
  shell: |
    echo | openssl s_client -connect {{ host }}:{{ port }} \
      -servername {{ host }} 2>&1 | openssl x509 -noout -serial
  register: cert_serial_output
  failed_when: false

- name: Handle connection or cert-load errors
  block:
    - name: Test TCP connectivity
      wait_for:
        host: "{{ host }}"
        port: "{{ port }}"
        timeout: 5
      register: port_check
      failed_when: false                                      # :contentReference[oaicite:8]{index=8}

    - name: Record down or load error on controller
      delegate_to: localhost
      set_fact:
        down_list: >-
          {{ down_list +
             [ server_name + ': ' +
               (port_check.rc != 0
                 and 'server down'
                 or 'unable to load certificate') ] }}
  when: cert_serial_output.rc != 0
        or "'unable to load certificate' in cert_serial_output.stdout.lower()"

- name: Skip further checks on error
  meta: end_host                                            # :contentReference[oaicite:9]{index=9}
  when: cert_serial_output.rc != 0
        or "'unable to load certificate' in cert_serial_output.stdout.lower()"

- name: Extract actual serial number
  set_fact:
    actual_serial: >-
      {{ cert_serial_output.stdout
         | regex_search('serial=([A-F0-9]+)', '\\1')
         | default('') }}

- name: Record OK serial on controller
  delegate_to: localhost
  set_fact:
    ok_list: "{{ ok_list + [ server_name + ': ' + actual_serial ] }}"  # :contentReference[oaicite:10]{index=10}

- name: Fail on serial mismatch
  fail:
    msg: "[{{ server_name }}] Serial mismatch: expected={{ expected_serial }}, actual={{ actual_serial }}"
  when: actual_serial != expected_serial
Task File: tasks/report.yml
yaml
Copy
Edit
---
- name: Render HTML report template
  template:
    src: templates/ssl_report.html.j2
    dest: "{{ report_file }}"                                  # :contentReference[oaicite:11]{index=11}

- name: Email SSL validation report
  mail:
    host: smtp.your.domain
    port: 25
    to: ops-team@your.domain
    subject: "SSL Validation Report – {{ generated }}"
    body: "{{ lookup('file', report_file) }}"
    subtype: html
Jinja2 Template: templates/ssl_report.html.j2
jinja2
Copy
Edit
<!DOCTYPE html>
<html>
  <body style="margin:0; padding:20px; font-family:Arial,sans-serif; background:#f4f4f4;">
    <table width="600" align="center" cellpadding="0" cellspacing="0"
           style="background:#ffffff; border:1px solid #dddddd; border-radius:4px;">
      <tr>
        <td style="background:#0B4F6C; color:#ffffff; padding:16px; font-size:20px;">
          SSL Validation Report
        </td>
      </tr>
      <tr>
        <td style="padding:12px; font-size:14px; color:#333333;">
          Generated on: {{ generated }}
        </td>
      </tr>
      <tr>
        <td style="padding:0 12px 8px;">
          <table width="100%" cellpadding="6" cellspacing="0"
                 style="border-collapse:collapse; font-size:13px;">
            <tr style="background:#E1ECF4; color:#0B4E79; font-weight:bold;">
              <th align="left" style="border:1px solid #ccc;">Server Name</th>
              <th align="left" style="border:1px solid #ccc;">Details</th>
              <th align="center" style="border:1px solid #ccc;">Status</th>
            </tr>
            {% for entry in ok_list %}
              {% set parts = entry.split(': ') %}
            <tr style="background:{% if loop.index is odd %}#F7FBFD{% else %}#FFFFFF{% endif %};">
              <td style="border:1px solid #ccc;">{{ parts[0] }}</td>
              <td style="border:1px solid #ccc;">Serial {{ parts[1] }}</td>
              <td align="center"
                  style="border:1px solid #ccc; color:#155724; background:#d4edda;">
                OK
              </td>
            </tr>
            {% endfor %}
            {% for entry in down_list %}
              {% set parts = entry.split(': ') %}
            <tr style="background:{% if loop.index is odd %}#FDF2F2{% else %}#FFFFFF{% endif %};">
              <td style="border:1px solid #ccc;">{{ parts[0] }}</td>
              <td style="border:1px solid #ccc;">{{ parts[1] }}</td>
              <td align="center"
                  style="border:1px solid #ccc; color:#721c24; background:#f8d7da;">
                ERROR
              </td>
            </tr>
            {% endfor %}
          </table>
        </td>
      </tr>
      <tr>
        <td style="padding:12px; font-size:12px; color:#777777; text-align:center;">
          &copy; {{ lookup('pipe','date +%Y') }} Your Organization
        </td>
      </tr>
    </table>
  </body>
</html>
With these files, running:
