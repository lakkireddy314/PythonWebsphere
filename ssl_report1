
validate_ssl_certificates.yml
yaml
Copy
Edit
---
- name: Validate SSL Certificates on WebSphere Servers
  hosts: websphere_servers
  gather_facts: false

  vars:
    wsadmin_path: /opt/IBM/WebSphere/AppServer/bin/wsadmin.sh
    jython_script: /tmp/wsadmin_jython_script.py

  tasks:
    - name: Deploy wsadmin Jython script
      copy:
        src: wsadmin_jython_script.py
        dest: "{{ jython_script }}"
        mode: '0755'

    - name: Execute wsadmin script and capture CSV output
      shell: "{{ wsadmin_path }} -lang jython -f {{ jython_script }}"
      register: wsadmin_output
      changed_when: false

    - name: Filter out unwanted wsadmin output lines
      set_fact:
        filtered_lines: "{{ wsadmin_output.stdout_lines
          | reject('search','was_user')
          | reject('search','WASX7209I')
          | list }}"

    - name: Initialize server list
      set_fact:
        servers: []

    - name: Build structured server list
      set_fact:
        servers: "{{ servers + [ ws_line.split(',') ] }}"
      loop: "{{ filtered_lines }}"
      loop_control:
        loop_var: ws_line
        label: "{{ ws_line }}"

    - name: Initialize report lists
      set_fact:
        ok_list: []
        down_list: []

    - name: Run SSL checks for each server
      include_tasks: tasks/ssl_checks.yml
      loop: "{{ servers }}"
      loop_control:
        loop_var: server
        label: "{{ server[2] }}"
      vars:
        server_name:     "{{ server[2] }}"
        node_name:       "{{ server[1] }}"
        host:            "{{ server[3].split('.')[0] }}"
        port:            "{{ server[4] | int }}"
        expected_serial: "{{ lookup('vars', host + '_cert_serial', default='') }}"

- name: Generate & Email SSL Validation Report
  hosts: localhost
  gather_facts: false
  vars:
    report_file: /tmp/ssl_validation_report.html

  tasks:
    - name: Include report generation tasks
      include_tasks: tasks/report.yml
tasks/ssl_checks.yml
yaml
Copy
Edit
---
- name: Retrieve SSL certificate serial number
  shell: |
    echo | openssl s_client -connect {{ host }}:{{ port }} \
      -servername {{ host }} 2>&1 | openssl x509 -noout -serial
  register: cert_serial_output
  failed_when: false

- name: Handle connection or cert-load errors
  block:
    - name: Test TCP connectivity
      wait_for:
        host: "{{ host }}"
        port: "{{ port }}"
        timeout: 5
      register: port_check
      failed_when: false

    - name: Server is down (record)
      set_fact:
        down_list: "{{ down_list + [ server_name + ': server down' ] }}"
      when: port_check.rc != 0

    - name: Unable to load certificate (record)
      set_fact:
        down_list: "{{ down_list + [ server_name + ': unable to load certificate' ] }}"
      when: port_check.rc == 0
  when: "'unable to load certificate' in cert_serial_output.stdout.lower()"

- name: Skip further checks on error
  meta: end_host
  when: "'unable to load certificate' in cert_serial_output.stdout.lower()"

- name: Extract actual serial number
  set_fact:
    actual_serial: >-
      {{ cert_serial_output.stdout
         | regex_search('serial=([A-F0-9]+)', '\\1')
         | default('') }}

- name: Record OK serial (before compare)
  set_fact:
    ok_list: "{{ ok_list + [ server_name + ': ' + actual_serial ] }}"

- name: Fail on serial mismatch
  fail:
    msg: "[{{ server_name }}] Serial mismatch: expected={{ expected_serial }}, actual={{ actual_serial }}"
  when: actual_serial != expected_serial

tasks/report.yml
yaml
Copy
Edit
---
- name: Render HTML report template
  template:
    src: templates/ssl_report.html.j2
    dest: "{{ report_file }}"

- name: Email SSL validation report
  mail:
    host: smtp.your.domain
    port: 25
    to: ops-team@your.domain
    subject: "SSL Validation Report â€“ {{ '%Y-%m-%d %H:%M UTC' | strftime }}"
    body: "{{ lookup('file', report_file) }}"
    subtype: html
And the accompanying Jinja2 template (templates/ssl_report.html.j2):
jinja2
Copy
Edit
<!DOCTYPE html>
<html>
  <body style="margin:0; padding:20px; font-family:Arial, sans-serif; background:#f4f4f4;">

    <table width="600" align="center" cellpadding="0" cellspacing="0"
           style="background:#ffffff; border:1px solid #dddddd; border-radius:4px; overflow:hidden;">
      <tr>
        <td style="background:#0B4F6C; color:#ffffff; padding:16px; font-size:20px; font-weight:bold;">
          SSL Validation Report
        </td>
      </tr>
      <tr>
        <td style="padding:12px; font-size:14px; color:#333333;">
          Generated on: {{ '%Y-%m-%d %H:%M UTC' | strftime }}
        </td>
      </tr>
      <tr>
        <td style="padding:0 12px 8px;">
          <table width="100%" cellpadding="6" cellspacing="0"
                 style="border-collapse:collapse; font-size:13px;">
            <tr style="background:#E1ECF4; color:#0B4F6C; font-weight:bold;">
              <th align="left" style="border:1px solid #ccc;">Server Name</th>
              <th align="left" style="border:1px solid #ccc;">Details</th>
              <th align="center" style="border:1px solid #ccc;">Status</th>
            </tr>
            {% for entry in ok_list %}
            <tr style="background:{% if loop.index is odd %}#F7FBFD{% else %}#FFFFFF{% endif %};">
              <td style="border:1px solid #ccc;">{{ entry.split(':')[0] }}</td>
              <td style="border:1px solid #ccc;">Serial {{ entry.split(':')[1] }}</td>
              <td align="center" style="border:1px solid #ccc; color:#155724; background:#d4edda;">
                OK
              </td>
            </tr>
            {% endfor %}
            {% for entry in down_list %}
            <tr style="background:{% if loop.index is odd %}#FDF2F2{% else %}#FFFFFF{% endif %};">
              <td style="border:1px solid #ccc;">{{ entry.split(':')[0] }}</td>
              <td style="border:1px solid #ccc;">{{ entry.split(':')[1] }}</td>
              <td align="center" style="border:1px solid #ccc; color:#721c24; background:#f8d7da;">
                ERROR
              </td>
            </tr>
            {% endfor %}
          </table>
        </td>
      </tr>
      <tr>
        <td style="padding:12px; font-size:12px; color:#777777; text-align:center;">
          &copy; {{ '%Y' | strftime }} Your Organization Name
        </td>
      </tr>
    </table>

  </body>
</html>
With these files in place, running ansible-playbook validate_ssl_certificates.yml will:

Gather host/port data via your wsadmin script.

Filter and validate SSL certificate serials, accumulating ok_list and down_list.

Render a polished, Outlook-friendly HTML report.

Email that report to your operations team.











Search

Deep rese
