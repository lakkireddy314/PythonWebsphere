- hosts: all
  gather_facts: false

  tasks:
    - name: Define files to check
      set_fact:
        file_list:
          - /opt/myapp/app.conf
          - /opt/myapp/db.conf
          - /opt/myapp/logging.conf

    - name: Stat each file in the list
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ file_list }}"
      loop_control:
        loop_var: file_path
      register: file_stats

    - name: Report existing files
      debug:
        msg: "Present: {{ item.file_path }}"
      loop: "{{ file_stats.results }}"
      when: item.stat.exists and (item.stat.isreg | default(false))

    - name: Copy missing files from templates
      ansible.builtin.copy:
        src: "templates/{{ item.file_path | basename }}"
        dest: "{{ item.file_path }}"
        mode: '0644'
      loop: "{{ file_stats.results }}"
      when: not item.stat.exists


#########################

- name: Normalize profile lines
  set_fact:
    profile_lines: >-
      {{ 
        profiles_raw.stdout_lines 
        if profiles_raw.stdout_lines is defined else
        profiles_raw.results[0].stdout_lines 
        if profiles_raw.results is defined else
        profiles_raw
      }}
#################################

- name: Build profile_map via zip
  hosts: all
  gather_facts: false
  vars:
    profile_cmd: /path/to/your/profile-list-script.sh

  tasks:
    - name: Run profile-to-hostname command
      ansible.builtin.command: "{{ profile_cmd }}"
      register: profile_out

    - name: Extract and split keys and values
      ansible.builtin.set_fact:
        keys:   "{{ profile_out.stdout_lines[1:] | map('split', ': ') | map('first') | list }}"
        values: "{{ profile_out.stdout_lines[1:] | map('split', ': ') | map('last')  | list }}"

    - name: Combine keys and values into dict
      ansible.builtin.set_fact:
        profile_map: "{{ dict(keys | ansible.builtin.zip(values)) }}"

