#!/usr/bin/env wsadmin.sh
# updatePluginProps.py
#
# This script for WebSphere 8.5.5.27 performs the following:
#   1. Reads custom properties from a Java-style properties file (key=value pairs).
#   2. Lists all WebServerPlugin configuration objects in the cell.
#   3. For each WebServerPlugin, updates its "customProperties" attribute to include the custom properties.
#   4. Propagates the changes by invoking the update method on the WebServerPlugin MBean.
#   5. Saves the configuration.
#
# Usage:
#   wsadmin.sh -lang jython -f updatePluginProps.py -- /path/to/custom.properties

import sys

def readPropertiesFile(filePath):
    """
    Reads a Java-style properties file and returns a dictionary of key/value pairs.
    Uses Python's built-in open() and splitlines() for compatibility with wsadmin.
    Ensure you pass an absolute file path.
    """
    props = {}
    try:
        filePath = str(filePath)
        f = open(filePath, 'r')
        content = f.read()
        lines = content.splitlines()
        f.close()
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            parts = line.split("=", 1)
            if len(parts) == 2:
                key = parts[0].strip()
                value = parts[1].strip()
                props[key] = value
    except Exception, e:
        print "Error reading properties file %s: %s" % (filePath, str(e))
    return props

def listWebServerPlugins():
    """
    Returns a list of WebServerPlugin configuration IDs in the cell.
    """
    pluginList = AdminConfig.list("WebServerPlugin").splitlines()
    return pluginList

def updatePluginProperties(wsPluginId, customProps):
    """
    Updates the plugin custom properties for the given WebServerPlugin configuration.
    This example sets the "customProperties" attribute to a space-separated list
    of entries in the form: [ key value ]
    """
    wsName = AdminConfig.showAttribute(wsPluginId, "name")
    currentProps = AdminConfig.showAttribute(wsPluginId, "customProperties")
    print "Current customProperties for %s: %s" % (wsName, currentProps)
    
    newPropsList = []
    for key in customProps:
        newPropsList.append("[ %s %s ]" % (key, customProps[key]))
    newPropsStr = " ".join(newPropsList)
    
    AdminConfig.modify(wsPluginId, [["customProperties", newPropsStr]])
    print "Updated %s with customProperties: %s" % (wsName, newPropsStr)

def propagatePluginChanges(wsPluginId):
    """
    Propagates the updated plugin configuration by invoking the update method on the
    WebServerPlugin MBean for the given WebServerPlugin configuration.
    """
    wsName = AdminConfig.showAttribute(wsPluginId, "name")
    mbeanQuery = "type=WebServerPlugin,name=%s,*" % wsName
    mbeanNames = AdminControl.queryNames(mbeanQuery)
    if mbeanNames:
        for mbean in mbeanNames.splitlines():
            result = AdminControl.invoke(mbean, "updatePluginCfg")
            print "Propagated plugin changes for %s via MBean %s: %s" % (wsName, mbean, result)
    else:
        print "No WebServerPlugin MBean found for %s" % wsName

def main():
    print "sys.argv:", sys.argv
    # In wsadmin, sys.argv[0] is the first (and only) argument passed (the properties file)
    if len(sys.argv) < 1:
        print "Usage: wsadmin.sh -lang jython -f updatePluginProps.py /path/to/custom.properties"
        sys.exit(1)

    propsFile = sys.argv[0]
    customProps = readPropertiesFile(propsFile)
    print "Custom properties to add:", customProps

    wsPluginList = listWebServerPlugins()
    if not wsPluginList:
        print "No WebServerPlugin objects found in the cell."
    else:
        for plugin in wsPluginList:
            wsName = AdminConfig.showAttribute(plugin, "name")
            print "Processing WebServerPlugin: %s" % wsName
            updatePluginProperties(plugin, customProps)
            propagatePluginChanges(plugin)
    
    AdminConfig.save()
    print "Configuration saved."

if __name__ == "__main__":
    main()
