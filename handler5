Reasoned about server status output parsing for 20 seconds
Below is an example of how you can implement the logic as an Ansible role using only handlers. This solution dynamically picks up any extra (i.e. “OtherServer”) application servers from the output and orders the fixed servers as required. In this example, the role is structured so that a minimal task triggers two main handler sub‑tasks—one for stopping servers (in reverse order) and one for starting servers (in the defined order).

For example, suppose the output of

bash
Copy
{{websphere_install_root}}/profiles/*w*/bin/serverStatus.sh -all
contains these lines (quotes added for clarity):

"ADMU0508I: The Application Server \"AppClusterMember1\" is STARTED."
"ADMU0508I: The Application Server \"MEClusterMember1\" is STARTED."
"ADMU0508I: The Application Server \"SupClusterMember1\" is STARTED."
"ADMU0508I: The Application Server \"OtherServer1\" is STARTED."
Any server not matching one of the three fixed patterns (MEClusterMember, SupClusterMember, AppClusterMember) will be considered an “OtherServer” and processed dynamically.

Below is the directory structure and the YAML code.

Directory Structure
css
Copy
roles/
└── websphere/
    ├── tasks/
    │   └── main.yml
    └── handlers/
        ├── main.yml
        ├── stop_appservers.yml
        └── start_appservers.yml
1. Minimal Tasks File – roles/websphere/tasks/main.yml
This file simply triggers the two handler blocks via notifications.

yaml
Copy
---
- name: Trigger WebSphere stop and start handlers
  debug:
    msg: "Triggering WebSphere handlers for stopping and starting servers"
  notify:
    - execute_stop_tasks
    - execute_start_tasks
2. Main Handlers File – roles/websphere/handlers/main.yml
This file imports the two sub‑handlers.

yaml
Copy
---
- import_tasks: stop_appservers.yml
- import_tasks: start_appservers.yml
3. Stop Servers Sub‑Handler – roles/websphere/handlers/stop_appservers.yml
This handler does the following for stopping servers (reverse order):

Retrieves the status output.
Extracts running servers using a regex that captures the server name between quotes.
Orders the list so that “OtherServer” entries (i.e. those not matching the fixed patterns) come first, followed by AppClusterMember, then SupClusterMember, and finally MEClusterMember.
Executes the stop command (./stopServer.sh) on each server.
yaml
Copy
---
- name: execute_stop_tasks
  block:
    - name: Get server status output for stopping
      shell: "{{ websphere_install_root }}/profiles/*w*/bin/serverStatus.sh -all"
      register: status_result_stop

    - name: Extract list of running servers (for stopping)
      set_fact:
        running_servers: "{{ status_result_stop.stdout | regex_findall('Application Server \\\"([^\\\"]+)\\\" is STARTED') }}"

    - name: Order running servers for stopping (reverse order)
      set_fact:
        ordered_running_servers: >-
          {{
            (running_servers | reject('search', 'MEClusterMember')
                              | reject('search', 'SupClusterMember')
                              | reject('search', 'AppClusterMember') | list) +
            (running_servers | select('search', 'AppClusterMember') | list) +
            (running_servers | select('search', 'SupClusterMember') | list) +
            (running_servers | select('search', 'MEClusterMember') | list)
          }}

    - name: Stop running application servers
      command: "{{ websphere_install_root }}/profiles/*w*/bin/stopServer.sh {{ server_name }}"
      loop: "{{ ordered_running_servers }}"
      loop_control:
        loop_var: server_name
  listen: execute_stop_tasks
Notes:

The regex pattern uses escaped quotes (\\\") to capture the server name from lines like:
ADMU0508I: The Application Server \"AppClusterMember1\" is STARTED.

The ordering for stop is reversed (i.e. “OtherServer” first, then fixed servers in reverse priority).

4. Start Servers Sub‑Handler – roles/websphere/handlers/start_appservers.yml
This handler performs the start operations in the desired order:

Retrieves the status output.
Extracts stopped servers using a regex that matches the stopped state message.
Orders the list so that fixed servers come first in the order: MEClusterMember, then SupClusterMember, then AppClusterMember, and finally any “OtherServer” entries.
Executes the start command (./startServer.sh) on each server.
yaml
Copy
---
- name: execute_start_tasks
  block:
    - name: Get server status output for starting
      shell: "{{ websphere_install_root }}/profiles/*w*/bin/serverStatus.sh -all"
      register: status_result_start

    - name: Extract list of stopped servers (for starting)
      set_fact:
        stopped_servers: "{{ status_result_start.stdout | regex_findall('Application Server \\\"([^\\\"]+)\\\" cannot be reached. It appears to be stopped.') }}"

    - name: Order stopped servers for starting
      set_fact:
        ordered_stopped_servers: >-
          {{
            (stopped_servers | select('search', 'MEClusterMember') | list) +
            (stopped_servers | select('search', 'SupClusterMember') | list) +
            (stopped_servers | select('search', 'AppClusterMember') | list) +
            (stopped_servers | reject('search', 'MEClusterMember')
                           | reject('search', 'SupClusterMember')
                           | reject('search', 'AppClusterMember') | list)
          }}

    - name: Start stopped application servers
      command: "{{ websphere_install_root }}/profiles/*w*/bin/startServer.sh {{ server_name }}"
      loop: "{{ ordered_stopped_servers }}"
      loop_control:
        loop_var: server_name
  listen: execute_start_tasks
Notes:

The regex for stopped servers expects output messages like:
ADMU0509I: The Application Server "AppClusterMember1" cannot be reached. It appears to be stopped.
The ordering for starting prioritizes fixed servers (MEClusterMember, then SupClusterMember, then AppClusterMember) and then appends any extra servers dynamically.
5. Example Playbook to Invoke the Role
Below is an example playbook (e.g., site.yml) that uses the websphere role. Adjust the variable websphere_install_root as needed:

yaml
Copy
---
- name: Manage WebSphere Application Servers via Role Handlers
  hosts: websphere_servers
  vars:
    websphere_install_root: "/opt/IBM/WebSphere"  # Update path as needed
  roles:
    - websphere
Summary
Dynamic Extraction:
The regex filters dynamically capture any extra server names from the status output. Servers not matching the fixed patterns (MEClusterMember, SupClusterMember, AppClusterMember) are treated as “OtherServer” entries.

Separate Sub‑Handlers:
The stop and start logic is completely separated into two handler files. The minimal tasks file triggers them by notification.

Ordering:
For starting, the order is fixed as MEClusterMember, SupClusterMember, AppClusterMember, and then others. For stopping, the order is reversed.

This solution should meet your requirements while dynamically handling extra servers when present.
