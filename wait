- name: Test TCP connectivity via telnet
  hosts: db
  gather_facts: no
  vars:
    port: 5432

  tasks:
    - name: Telnet to {{ inventory_hostname }}:{{ port }}
      ansible.builtin.shell: |
        timeout 5 telnet {{ inventory_hostname }} {{ port }} </dev/null 2>&1 \
          && echo "CONNECTED" || echo "FAILED"
      register: telnet_check
      changed_when: false

    - name: Show telnet result
      ansible.builtin.debug:
        msg: "Port {{ port }} on {{ inventory_hostname }} is {{ telnet_check.stdout }}"
      failed_when: telnet_check.stdout != "CONNECTED"
####################
- name: Check port with telnet
  ansible.netcommon.telnet:
    host: "{{ host }}"
    port: "{{ port }}"
    timeout: 5
  register: telnet_result
  ignore_errors: yes

- name: Evaluate telnet connectivity
  ansible.builtin.debug:
    msg: >-
      {{ host }}:{{ port }} is
      {{ 'OK' if telnet_result.rc == 0 else 'FAILED' }}

- name: Store telnet-based status
  ansible.builtin.set_fact:
    connection_status: "{{ 'ok' if telnet_result.rc == 0 else 'fail' }}"

#####################

- name: Check TCP connectivity with wait_for
  ansible.builtin.wait_for:
    host: "{{ host }}"
    port: "{{ port }}"
    timeout: 5
    state: started
  register: wait_result
  ignore_errors: yes

- name: Report status
  ansible.builtin.debug:
    msg: >-
      {{ host }}:{{ port }} is
      {{ 'OK' if not wait_result.failed else 'FAILED' }}

- name: Set normalized status fact
  ansible.builtin.set_fact:
    connection_status: "{{ 'ok' if not wait_result.failed else 'fail' }}"

