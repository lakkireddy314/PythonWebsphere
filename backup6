Below is the complete, restructured role that now avoids using a loop directly on a block in the backup and restore tasks. Instead, we “include” separate task files for each source directory using include_tasks with a loop. This approach is more reliable across Ansible versions.

In addition, the role supports these control variables:

mode:

"upgrade" – runs the full upgrade process (with pre‑upgrade backup, optional upgrade tasks, automatic rollback on failure, and post‑upgrade configuration).
"restore" – runs only the restore tasks.
only_config:

When true, only post‑upgrade configuration tasks run.
upgrade_enabled:

When false, the upgrade tasks are skipped.
enable_rollback:

When false, rollback (restore tasks on failure) is disabled.
Host‐specific backup target paths use ansible_hostname so each server’s backups are isolated.

The role folder structure is as follows:

css
Copy
upgrade_ibm/
├── tasks
│   ├── main.yml
│   ├── backup.yml
│   ├── process_webserver_backup.yml
│   ├── process_websphere_backup.yml
│   ├── upgrade.yml
│   ├── restore.yml
│   ├── process_webserver_restore.yml
│   ├── process_websphere_restore.yml
│   └── post_configs.yml
└── vars
    └── main.yml
Below are the contents of each file with explanations.

1. File: upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging)
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# Installation flags (set true if the component is installed)
websphere_installed: true
baw_installed: false
ihs_installed: false
plugin_installed: true

# Define a components list used by restore tasks.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control:
# If true, perform a pre-upgrade backup.
pre_upgrade_backup: true

# Rollback control:
# Set enable_rollback to true to run restore tasks in case of an upgrade failure.
enable_rollback: true

# Optional upgrade tasks control:
# Set upgrade_enabled to true to run upgrade tasks (default) or false to skip them.
upgrade_enabled: true

# Mode control:
# "upgrade" runs the full upgrade process (with backup, optional upgrade, rollback, and post-config tasks).
# "restore" runs only the restore tasks.
mode: "upgrade"

# Only configuration mode:
# Set only_config to true to run only the post-upgrade configuration tasks.
only_config: false
Explanation:
This vars file sets the backup base and target paths (including the host’s name via ansible_hostname), the source directories to be archived, retention limits, installation flags, and control switches (mode, only_config, upgrade_enabled, and enable_rollback). The components list aggregates information for restore tasks.

2. File: upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
#
# Workflow:
# - If only_config is true, only post-upgrade configuration tasks run.
# - Else, if mode is "upgrade":
#     1. Optionally run pre-upgrade backup tasks.
#     2. Optionally run upgrade tasks (if upgrade_enabled is true) inside a block.
#        If any upgrade task fails and enable_rollback is true, the rescue section triggers the restore tasks.
#     3. The always section runs post-upgrade configuration tasks.
# - Else, if mode is "restore": only the restore tasks are executed.

- name: Run only configuration tasks if only_config is true
  import_tasks: post_configs.yml
  when: only_config | default(false)

- name: Run upgrade process if not only_config and mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)

    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere (optional)
      import_tasks: upgrade.yml
      when: upgrade_enabled | default(true)
  rescue:
    - name: Upgrade process failed - rollback disabled message
      debug:
        msg: "Upgrade failed. Rollback is disabled."
      when: not (enable_rollback | default(true))
    - name: Upgrade process failed; executing restore tasks for rollback
      import_tasks: restore.yml
      when: enable_rollback | default(true)
  always:
    - name: Run post-upgrade configuration tasks
      import_tasks: post_configs.yml
  when: (mode == "upgrade") and not (only_config | default(false))

- name: Run only restore tasks if not only_config and mode is "restore"
  import_tasks: restore.yml
  when: (mode == "restore") and not (only_config | default(false))
Explanation:
The main tasks file first checks if only configuration tasks should run. Otherwise, in "upgrade" mode, it runs backup tasks (if enabled) and then upgrade tasks (if upgrade_enabled is true) within a block. If any upgrade task fails and rollback is enabled, the rescue section triggers restore tasks. The always section ensures post‑upgrade configuration tasks run regardless of outcome. In "restore" mode, only the restore tasks run.

3. File: upgrade_ibm/tasks/backup.yml
yaml
Copy
---
# Backup tasks for IBM WebServer and IBM WebSphere.
# Instead of using a loop directly on a block (which may not work reliably),
# we use include_tasks with a loop to process each source directory individually.

- name: Process WebServer backup for each source directory
  include_tasks: process_webserver_backup.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere backup for each source directory
  include_tasks: process_websphere_backup.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
This file uses include_tasks to call two separate files—one for WebServer and one for WebSphere—that process each source directory. The loop is now applied at the include_tasks level, which is well supported by Ansible.

4. File: upgrade_ibm/tasks/process_webserver_backup.yml
yaml
Copy
---
- name: Check if source directory {{ ws_src }} exists (WebServer)
  stat:
    path: "{{ ws_src }}"
  register: ws_source_stat

- name: Ensure target backup directory exists for {{ ws_src | basename }} (WebServer)
  file:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    state: directory
    mode: '0755'
  when: ws_source_stat.stat.exists

- name: Archive {{ ws_src }} (WebServer)
  archive:
    path: "{{ ws_src }}"
    dest: "{{ webserver_backup_dir }}/{{ ws_src | basename }}/{{ ws_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar"
    format: tar
  when: ws_source_stat.stat.exists

- name: Find existing backups for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: ws_existing_backups
  when: ws_source_stat.stat.exists

- name: Remove old WebServer backups for {{ ws_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ws_existing_backups.files | sort(attribute='mtime') | list | slice(0, ws_existing_backups.files | length - backup_retain) }}"
  loop_control:
    loop_var: item
  when: ws_source_stat.stat.exists and (ws_existing_backups.files | length > backup_retain)
Explanation:
This file handles a single WebServer source directory (passed as ws_src). It checks if the directory exists, creates a backup subdirectory, archives the source directory with a timestamp, and cleans up older backups.

5. File: upgrade_ibm/tasks/process_websphere_backup.yml
yaml
Copy
---
- name: Check if source directory {{ wsphere_src }} exists (WebSphere)
  stat:
    path: "{{ wsphere_src }}"
  register: wsphere_source_stat

- name: Ensure target backup directory exists for {{ wsphere_src | basename }} (WebSphere)
  file:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    state: directory
    mode: '0755'
  when: wsphere_source_stat.stat.exists

- name: Archive {{ wsphere_src }} (WebSphere)
  archive:
    path: "{{ wsphere_src }}"
    dest: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}/{{ wsphere_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar"
    format: tar
  when: wsphere_source_stat.stat.exists

- name: Find existing backups for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: wsphere_existing_backups
  when: wsphere_source_stat.stat.exists

- name: Remove old WebSphere backups for {{ wsphere_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ wsphere_existing_backups.files | sort(attribute='mtime') | list | slice(0, wsphere_existing_backups.files | length - backup_retain) }}"
  loop_control:
    loop_var: item
  when: wsphere_source_stat.stat.exists and (wsphere_existing_backups.files | length > backup_retain)
Explanation:
This file performs similar actions as the WebServer backup file but for a single WebSphere source directory (wsphere_src).

6. File: upgrade_ibm/tasks/upgrade.yml
yaml
Copy
---
# Upgrade tasks for IBM WebServer and IBM WebSphere.
# Replace the debug tasks below with your actual upgrade installer commands or scripts.

- name: Upgrade IBM WebServer Block
  block:
    - name: Execute upgrade commands for WebServer (example)
      debug:
        msg: "Upgrading IBM WebServer on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebServer
      debug:
        msg: "Running WebServer post-upgrade configuration on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Upgrade IBM WebSphere Block
  block:
    - name: Execute upgrade commands for WebSphere (example)
      debug:
        msg: "Upgrading IBM WebSphere on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebSphere
      debug:
        msg: "Running WebSphere post-upgrade configuration on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
These tasks are placeholders for your actual upgrade logic. They run only if the corresponding components are installed.

7. File: upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# Instead of using a loop on a block, we use include_tasks with a loop to process each source directory.

- name: Process WebServer restore for each source directory
  include_tasks: process_webserver_restore.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere restore for each source directory
  include_tasks: process_websphere_restore.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
This file uses include_tasks to process restore actions for each source directory individually—one file for WebServer and one for WebSphere. The loop is applied at the include level.

8. File: upgrade_ibm/tasks/process_webserver_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ ws_src | basename }} (WebServer)
  stat:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ ws_src | basename }} (WebServer) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ ws_src | basename }} (WebServer) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ ws_src | basename }} (WebServer)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: absent
  when: latest_backup is defined

- name: Recreate directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ ws_src | basename }} (WebServer)
  unarchive:
    src: "{{ latest_backup }}"
    dest: "{{ ws_src }}"
    remote_src: yes
  when: latest_backup is defined

- name: Clean up older backups for {{ ws_src | basename }} (WebServer) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1
Explanation:
This file processes a single WebServer source directory (ws_src) for restore. It checks for the backup target, finds backups, selects the latest archive, removes the current directory, recreates it, and restores from the backup. It also cleans up older backups.

9. File: upgrade_ibm/tasks/process_websphere_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ wsphere_src | basename }} (WebSphere)
  stat:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ wsphere_src | basename }} (WebSphere) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ wsphere_src | basename }} (WebSphere) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ wsphere_src | basename }} (WebSphere)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: absent
  when: latest_backup is defined

- name: Recreate directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ wsphere_src | basename }} (WebSphere)
  unarchive:
    src: "{{ latest_backup }}"
    dest: "{{ wsphere_src }}"
    remote_src: yes
  when: latest_backup is defined

- name: Clean up older backups for {{ wsphere_src | basename }} (WebSphere) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1
Explanation:
This file is similar to the WebServer restore file but handles a single WebSphere source directory (wsphere_src).

10. File: upgrade_ibm/tasks/post_configs.yml
yaml
Copy
---
# Post-upgrade configuration tasks.
# These tasks run in the always section of the main block,
# regardless of whether the upgrade succeeded or failed.
# Use this file to apply final configurations, validations, or notifications.

- name: Run post-upgrade configuration for IBM WebServer
  debug:
    msg: "Applying post-upgrade configuration for IBM WebServer on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Run post-upgrade configuration for IBM WebSphere
  debug:
    msg: "Applying post-upgrade configuration for IBM WebSphere on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation:
This file contains tasks that run after the upgrade (or rollback) process. They are used to apply any final configuration or validations and run regardless of the upgrade outcome.

11. File: upgrade_ibm_playbook.yml
yaml
Copy
---
- name: Upgrade IBM WebServer and IBM WebSphere with Backup/Restore and Optional Config Only
  hosts: aix_servers
  gather_facts: yes
  vars:
    # Override variables if needed.
    backup_dir: "/install/BAW/backups"
    env: "production"
    baw_user: "bawuser"
    webserver_tar_dir:
      - /opt/ihs/85
      - /opt/websphere/85
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc
    websphere_tar_dir:
      - /opt/wps8/websphere/
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc

    # Installation flags.
    websphere_installed: true
    baw_installed: false
    ihs_installed: false
    plugin_installed: true

    # Upgrade control.
    pre_upgrade_backup: true
    enable_rollback: true
    upgrade_enabled: true

    # Mode control:
    # "upgrade" runs the full upgrade process,
    # "restore" runs only the restore tasks.
    mode: "upgrade"

    # Only configuration mode:
    # When true, only the post-upgrade configuration tasks run.
    only_config: false
  roles:
    - upgrade_ibm
Explanation:
This sample playbook demonstrates how to run the role, overriding variables as needed. You can choose the workflow by setting mode (upgrade vs. restore) and only_config (to run just configuration tasks).

Final Role Overview
vars/main.yml: Sets all global variables, including per‑host backup paths (using ansible_hostname), source directories, retention count, component definitions, and control switches.
tasks/main.yml: Orchestrates the overall workflow with a block/rescue/always structure that supports:
Running only configuration tasks if only_config is true.
In "upgrade" mode, optionally running pre‑upgrade backup and upgrade tasks (controlled by upgrade_enabled), automatically triggering rollback (restore tasks) if failure occurs (if enable_rollback is true), and always running post‑upgrade configuration tasks.
In "restore" mode, only restore tasks run.
tasks/backup.yml: Uses include_tasks to process each WebServer and WebSphere source directory individually for backup.
tasks/process_webserver_backup.yml & process_websphere_backup.yml: Handle the actual backup operations for a single source directory (check existence, create backup directory, archive, and cleanup).
tasks/upgrade.yml: Contains placeholder upgrade tasks.
tasks/restore.yml: Uses include_tasks to process restore operations for each source directory.
tasks/process_webserver_restore.yml & process_websphere_restore.yml: Handle the actual restore operations for a single source directory (check for backups, select latest, remove current directory, restore, and cleanup).
tasks/post_configs.yml: Contains post‑upgrade configuration tasks that run regardless of outcome.
upgrade_ibm_playbook.yml: A sample playbook showing how to invoke the role with variable overrides.
This role now provides a robust, flexible upgrade workflow that supports per‑host backup/restore, optional upgrade actions, rollback on failure, and the ability to run only configuration tasks—all without relying on a loop directly on a block.






