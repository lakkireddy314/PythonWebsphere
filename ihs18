Below are your Ansible 2.9–compatible backup and restore tasks, updated so that:

Backup grabs all basename.* files (.kdb, .sth, .rdb, etc.) using the actual KDB basename.

Restore safely builds a latest_kdb_map only for files that actually have backups—avoiding the “sequence was empty” error—and then copies each one back by iterating over that map.

tasks/backup.yml
yaml
Copy
---
# tasks/backup.yml

- name: "Determine KDB basename for {{ cert_entry.kdb_file }}"
  ansible.builtin.set_fact:
    kdb_base: "{{ cert_entry.kdb_file | basename | regex_replace('\\.kdb$','') }}"
  tags: [backup]

- name: "Find all KDB-related files ({{ kdb_base }}.*)"
  ansible.builtin.find:
    paths: "{{ cert_entry.kdb_file | dirname }}"
    patterns: "{{ kdb_base }}.*"
    file_type: file
    recurse: no
  register: kdb_files
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [backup]

- name: "Ensure KDB backup directory exists"
  ansible.builtin.file:
    path: "{{ cert_entry.kdb_file | dirname }}/Ansible_backup"
    state: directory
    mode: '0755'
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [backup]

- name: "Backup each KDB-related file with timestamp"
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: >-
      {{ cert_entry.kdb_file | dirname }}/Ansible_backup/
      {{ item.path | basename }}.{{ backup_datetime }}
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  loop: "{{ kdb_files.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [backup]

- name: "Ensure HTTPD backup directory exists"
  ansible.builtin.file:
    path: "{{ cert_entry.config_file | dirname }}/Ansible_backup"
    state: directory
    mode: '0755'
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [backup]

- name: "Backup HTTPD config with timestamp"
  ansible.builtin.copy:
    src: "{{ cert_entry.config_file }}"
    dest: >-
      {{ cert_entry.config_file | dirname }}/Ansible_backup/
      {{ cert_entry.config_file | basename }}.{{ backup_datetime }}
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [backup]
Explanation

We set kdb_base to the KDB filename without .kdb.

find then matches {{ kdb_base }}.*, grabbing .kdb, .sth, .rdb, etc.

Each file is copied into Ansible_backup/ with a timestamp suffix.

tasks/restore.yml
yaml
Copy
---
# tasks/restore.yml

- name: "Determine KDB basename for {{ cert_entry.kdb_file }}"
  ansible.builtin.set_fact:
    kdb_base: "{{ cert_entry.kdb_file | basename | regex_replace('\\.kdb$','') }}"
  tags: [restore]

- name: "Find all KDB backups for {{ kdb_base }}.*"
  ansible.builtin.find:
    paths: "{{ cert_entry.kdb_file | dirname }}/Ansible_backup"
    patterns: "{{ kdb_base }}.*"
    file_type: file
    recurse: no
  register: kdb_backups
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [restore]

- name: "Build map of latest backups per file"
  ansible.builtin.set_fact:
    latest_kdb_map: >-
      {{
        (latest_kdb_map | default({}))
        | combine({
            item: (
              kdb_backups.files
              | selectattr('path','search','^.*/' ~ item ~ '\\.')
              | sort(attribute='mtime')
              | last
            ).path
          })
      }}
  vars:
    candidate_files: >-
      {{ kdb_backups.files
         | selectattr('path','search','^.*/' ~ item ~ '\\.')
         | list }}
  loop: "{{ kdb_backups.files
            | map(attribute='path')
            | map('basename')
            | map('regex_replace','\\.[0-9]{14}$','')
            | unique | list }}"
  loop_control:
    loop_var: item
    label: "{{ item }}"
  when: candidate_files | length > 0
  delegate_to: "{{ inventory_hostname }}"
  tags: [restore]

- name: "Restore each KDB-related file from latest backup"
  ansible.builtin.copy:
    src: "{{ latest_kdb_map[item.key] }}"
    dest: "{{ cert_entry.kdb_file | dirname }}/{{ item.key }}"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  loop: "{{ latest_kdb_map | dict2items }}"
  loop_control:
    loop_var: item
    label: "{{ item.key }}"
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [restore]

- name: "Find HTTPD config backups"
  ansible.builtin.find:
    paths: "{{ cert_entry.config_file | dirname }}/Ansible_backup"
    patterns: "{{ cert_entry.config_file | basename }}.*"
    file_type: file
    recurse: no
  register: httpd_backups
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [restore]

- name: "Set latest_httpd_backup", ansible.builtin.set_fact
  ansible.builtin.set_fact:
    latest_httpd_backup: >-
      {{ (httpd_backups.files | sort(attribute='mtime') | last).path
         if httpd_backups.files | length > 0 else '' }}
  delegate_to: "{{ inventory_hostname }}"
  tags: [restore]

- name: "Restore HTTPD config from latest backup"
  ansible.builtin.copy:
    src: "{{ latest_httpd_backup }}"
    dest: "{{ cert_entry.config_file }}"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: latest_httpd_backup != ''
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags: [restore]

- name: "Restart IBM HTTP Server after rollback"
  ansible.builtin.command: >
    /opt/ihs/85/bin/apachectl -f {{ cert_entry.config_file }} -k restart
  become: true
  delegate_to: "{{ inventory_hostname }}"
  tags: [restore]
Explanation

find collects all timestamped backups matching kdb_base.*.

We loop over the unique original filenames (strip .TIMESTAMP) and for each build latest_kdb_map[item] pointing to the newest backup path.

We then copy each latest_kdb_map entry back into place by iterating dict2items on that map.

Guards (when: candidate_files | length > 0) prevent errors if no backups exist.
