Below is the final complete version of the upgrade_ibm role with a modification: in all loops where we previously used the default variable name item, we now use a custom loop variable name (backup_file). This makes the code clearer and helps avoid confusion. The role still supports:

Loading external installation flags.
Per‑host backup directories using ansible_hostname.
Using tar via the command or shell module (with -C so that only relative paths are stored).
Modular task files using include_tasks with loops (using our custom variable backup_file).
A block/rescue/always structure in tasks/main.yml that measures total execution time.
Workflow control via variables such as mode, only_config, upgrade_enabled, and enable_rollback.
Below you’ll find the entire role with detailed explanations and the custom loop variable name in place.

Role Folder Structure
css
Copy
upgrade_ibm/
├── tasks
│   ├── main.yml
│   ├── backup.yml
│   ├── process_webserver_backup.yml
│   ├── process_websphere_backup.yml
│   ├── upgrade.yml
│   ├── restore.yml
│   ├── process_webserver_restore.yml
│   ├── process_websphere_restore.yml
│   └── post_configs.yml
├── vars
│   └── main.yml
└── installation_flags.yml
A sample playbook file (e.g. upgrade_ibm_playbook.yml) is provided at the end.

1. File: upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging)
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# The following installation flags (defaults) can be overridden by installation_flags.yml.
baw_installed: false
websphere_installed: false
ihs_installed: false
plugin_installed: false

# Define a components list used by restore tasks.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control:
pre_upgrade_backup: true

# Rollback control:
enable_rollback: true

# Optional upgrade tasks control:
upgrade_enabled: true

# Mode control:
# "upgrade" runs the full upgrade process (with backup, optional upgrade tasks, rollback on failure, and post-configuration).
# "restore" runs only the restore tasks.
mode: "upgrade"

# Only configuration mode:
only_config: false
Explanation & Features:

Target Directories: Each host’s backups are stored in a subdirectory determined by ansible_hostname.
Components List: Used later in restore tasks to iterate over WebServer and WebSphere.
Control Variables: These variables (e.g. mode, only_config) determine the workflow.
2. File: upgrade_ibm/installation_flags.yml
yaml
Copy
---
baw_installed: false
websphere_installed: true
ihs_installed: false
plugin_installed: true
Explanation & Features:

This file provides external installation flag values that override defaults in vars/main.yml.
3. File: upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
#
# Workflow:
# - Set start time.
# - Load external installation flags.
# - If only_config is true, run only post-upgrade configuration tasks.
# - Else, if mode is "upgrade":
#     1. Optionally run pre-upgrade backup tasks.
#     2. Optionally run upgrade tasks (if upgrade_enabled is true) inside a block.
#        If any upgrade task fails and enable_rollback is true, the rescue section triggers restore tasks.
#     3. The always section runs post-upgrade configuration tasks.
# - Else, if mode is "restore": run only the restore tasks.
# - Finally, calculate and display total execution time.

- name: Set start time
  set_fact:
    start_time: "{{ lookup('pipe','date +%s') | int }}"

- name: Load installation flags from installation_flags.yml
  include_vars: "installation_flags.yml"

- name: Run only configuration tasks if only_config is true
  import_tasks: post_configs.yml
  when: only_config | default(false)

- name: Run upgrade process if not only_config and mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)

    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere (optional)
      import_tasks: upgrade.yml
      when: upgrade_enabled | default(true)
  rescue:
    - name: Upgrade process failed - rollback disabled message
      debug:
        msg: "Upgrade failed. Rollback is disabled."
      when: not (enable_rollback | default(true))
    - name: Upgrade process failed; executing restore tasks for rollback
      import_tasks: restore.yml
      when: enable_rollback | default(true)
  always:
    - name: Run post-upgrade configuration tasks
      import_tasks: post_configs.yml
  when: (mode == "upgrade") and not (only_config | default(false))

- name: Run only restore tasks if not only_config and mode is "restore"
  import_tasks: restore.yml
  when: (mode == "restore") and not (only_config | default(false))

- name: Set end time
  set_fact:
    end_time: "{{ lookup('pipe','date +%s') | int }}"

- name: Display total execution time
  debug:
    msg: "Total execution time: {{ (end_time - start_time) }} seconds"
  when: start_time is defined and end_time is defined
Explanation & Features:

Time Measurement: Start and end times are recorded to display total execution time.
Workflow Control: Based on mode and only_config, the role runs either the full upgrade (with backup, upgrade, rescue, and post-config tasks) or only restore tasks.
Block/Rescue/Always: Provides rollback capability if upgrade fails.
4. File: upgrade_ibm/tasks/backup.yml
yaml
Copy
---
# Backup tasks for IBM WebServer and IBM WebSphere.
- name: Process WebServer backup for each source directory
  include_tasks: process_webserver_backup.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere backup for each source directory
  include_tasks: process_websphere_backup.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Modular Backup Processing:
Uses include_tasks to loop over each source directory with custom loop variable names (ws_src and wsphere_src).
Conditional Execution:
Tasks run only if the component is installed.
5. File: upgrade_ibm/tasks/process_webserver_backup.yml
yaml
Copy
---
- name: Check if source directory {{ ws_src }} exists (WebServer)
  stat:
    path: "{{ ws_src }}"
  register: ws_source_stat

- name: Ensure target backup directory exists for {{ ws_src | basename }} (WebServer)
  file:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    state: directory
    mode: '0755'
  when: ws_source_stat.stat.exists

- name: Archive {{ ws_src }} (WebServer) using tar
  command: tar -C "{{ ws_src | dirname }}" -cf "{{ webserver_backup_dir }}/{{ ws_src | basename }}/{{ ws_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ ws_src | basename }}"
  when: ws_source_stat.stat.exists

- name: Find existing backups for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: ws_existing_backups
  when: ws_source_stat.stat.exists

- name: Set remove_count for WebServer backups for {{ ws_src | basename }}
  set_fact:
    remove_count: "{{ (ws_existing_backups.files | default([]) | length | int) - (backup_retain | int) }}"
  when: ws_source_stat.stat.exists

- name: Remove old WebServer backups for {{ ws_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ backup_file.path }}"
    state: absent
  loop: "{{ (ws_existing_backups.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: backup_file
  when: ws_source_stat.stat.exists and (ws_existing_backups.files | default([]) | length | int) > (backup_retain | int) and (remove_count | int) > 0
Explanation & Features:

Relative Archiving with Tar:
Uses tar -C to archive only the basename, avoiding full path storage.
Custom Loop Variable:
The loop variable is now backup_file instead of the default item.
Safe Cleanup:
Computes remove_count and removes old backups if more than backup_retain exist.
6. File: upgrade_ibm/tasks/process_websphere_backup.yml
yaml
Copy
---
- name: Check if source directory {{ wsphere_src }} exists (WebSphere)
  stat:
    path: "{{ wsphere_src }}"
  register: wsphere_source_stat

- name: Ensure target backup directory exists for {{ wsphere_src | basename }} (WebSphere)
  file:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    state: directory
    mode: '0755'
  when: wsphere_source_stat.stat.exists

- name: Archive {{ wsphere_src }} (WebSphere) using tar
  command: tar -C "{{ wsphere_src | dirname }}" -cf "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}/{{ wsphere_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ wsphere_src | basename }}"
  when: wsphere_source_stat.stat.exists

- name: Find existing backups for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: wsphere_existing_backups
  when: wsphere_source_stat.stat.exists

- name: Set remove_count for WebSphere backups for {{ wsphere_src | basename }}
  set_fact:
    remove_count: "{{ (wsphere_existing_backups.files | default([]) | length | int) - (backup_retain | int) }}"
  when: wsphere_source_stat.stat.exists

- name: Remove old WebSphere backups for {{ wsphere_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ backup_file.path }}"
    state: absent
  loop: "{{ (wsphere_existing_backups.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: backup_file
  when: wsphere_source_stat.stat.exists and (wsphere_existing_backups.files | default([]) | length | int) > (backup_retain | int) and (remove_count | int) > 0
Explanation & Features:

Mirrors WebServer Backup:
Uses the same relative archiving and cleanup strategy.
Custom Loop Variable:
Uses backup_file as the loop variable.
7. File: upgrade_ibm/tasks/upgrade.yml
yaml
Copy
---
# Upgrade tasks for IBM WebServer and IBM WebSphere.
# Replace these debug tasks with your actual upgrade installer commands or scripts.
- name: Upgrade IBM WebServer Block
  block:
    - name: Execute upgrade commands for WebServer (example)
      debug:
        msg: "Upgrading IBM WebServer on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebServer
      debug:
        msg: "Running WebServer post-upgrade configuration on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Upgrade IBM WebSphere Block
  block:
    - name: Execute upgrade commands for WebSphere (example)
      debug:
        msg: "Upgrading IBM WebSphere on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebSphere
      debug:
        msg: "Running WebSphere post-upgrade configuration on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Placeholder Upgrade Tasks:
Replace debug messages with your actual upgrade commands.
Conditional Execution:
Each block runs only if the corresponding component is installed.
8. File: upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# Uses include_tasks with loops to process each source directory individually.
- name: Process WebServer restore for each source directory
  include_tasks: process_webserver_restore.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere restore for each source directory
  include_tasks: process_websphere_restore.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Modular Restore Processing:
Uses include_tasks with custom loop variables to process each source directory for restore.
Conditional Execution:
Only executes if the component is installed.
9. File: upgrade_ibm/tasks/process_webserver_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ ws_src | basename }} (WebServer)
  stat:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ ws_src | basename }} (WebServer) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ ws_src | basename }} (WebServer) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ ws_src | basename }} (WebServer)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ ws_src }} (WebServer)
  shell: rm -rf "{{ ws_src }}"
  retries: 5
  delay: 10
  register: rm_result
  until: rm_result.rc == 0
  when: latest_backup is defined

- name: Recreate directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ ws_src | basename }} (WebServer)
  command: tar -xf "{{ latest_backup }}" -C "{{ ws_src }}"
  when: latest_backup is defined

- name: Set remove_count for older WebServer backups for {{ ws_src | basename }} (Restore)
  set_fact:
    remove_count: "{{ (backup_files.files | default([]) | length | int) - 1 }}"
  when: backup_files.files | length > 1

- name: Clean up older backups for {{ ws_src | basename }} (WebServer) - keep only latest
  file:
    path: "{{ backup_file.path }}"
    state: absent
  loop: "{{ (backup_files.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: backup_file
  when: backup_files.files | length > 1 and (remove_count | int) > 0
Explanation & Features:

Forced Removal with Retries:
Uses the shell module with rm -rf (with retries and delays) to forcefully remove the directory if busy.
Tar Extraction:
Uses tar to extract the latest backup.
Custom Loop Variable:
The loop variable for cleanup is now backup_file (instead of the default item).
Safe Cleanup:
Computes remove_count and safely slices the list to remove older backups.
10. File: upgrade_ibm/tasks/process_websphere_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ wsphere_src | basename }} (WebSphere)
  stat:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ wsphere_src | basename }} (WebSphere) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ wsphere_src | basename }} (WebSphere) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ wsphere_src | basename }} (WebSphere)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ wsphere_src }} (WebSphere)
  shell: rm -rf "{{ wsphere_src }}"
  retries: 5
  delay: 10
  register: rm_result
  until: rm_result.rc == 0
  when: latest_backup is defined

- name: Recreate directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ wsphere_src | basename }} (WebSphere)
  command: tar -xf "{{ latest_backup }}" -C "{{ wsphere_src }}"
  when: latest_backup is defined

- name: Set remove_count for older WebSphere backups for {{ wsphere_src | basename }} (Restore)
  set_fact:
    remove_count: "{{ (backup_files.files | default([]) | length | int) - 1 }}"
  when: backup_files.files | length > 1

- name: Clean up older backups for {{ wsphere_src | basename }} (WebSphere) - keep only latest
  file:
    path: "{{ backup_file.path }}"
    state: absent
  loop: "{{ (backup_files.files | sort(attribute='mtime') | list)[:(remove_count | int)] }}"
  loop_control:
    loop_var: backup_file
  when: backup_files.files | length > 1 and (remove_count | int) > 0
Explanation & Features:

Similar to WebServer Restore:
Uses the same logic for WebSphere with the custom loop variable backup_file.
Forced Removal & Tar Extraction:
Removes the current directory with retries and extracts the backup using tar.
Safe Cleanup:
Safely removes older backups based on the computed remove_count.
11. File: upgrade_ibm/tasks/post_configs.yml
yaml
Copy
---
# Post-upgrade configuration tasks.
# These tasks run in the always section of the main block,
# regardless of whether the upgrade succeeded or failed.
- name: Run post-upgrade configuration for IBM WebServer
  debug:
    msg: "Applying post-upgrade configuration for IBM WebServer on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Run post-upgrade configuration for IBM WebSphere
  debug:
    msg: "Applying post-upgrade configuration for IBM WebSphere on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Explanation & Features:

Post-Configuration:
These tasks perform any final configuration or validation and run regardless of the upgrade outcome.
12. File: upgrade_ibm_playbook.yml
yaml
Copy
---
- name: Upgrade IBM WebServer and IBM WebSphere with Backup/Restore and Optional Config Only
  hosts: aix_servers
  gather_facts: yes
  vars:
    # Override variables if needed.
    backup_dir: "/install/BAW/backups"
    env: "production"
    baw_user: "bawuser"
    webserver_tar_dir:
      - /opt/ihs/85
      - /opt/websphere/85
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc
    websphere_tar_dir:
      - /opt/wps8/websphere/
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc

    # Installation flags (or use external installation_flags.yml)
    baw_installed: false
    websphere_installed: true
    ihs_installed: false
    plugin_installed: true

    # Upgrade control.
    pre_upgrade_backup: true
    enable_rollback: true
    upgrade_enabled: true

    # Mode control:
    # "upgrade" runs the full upgrade process,
    # "restore" runs only the restore tasks.
    mode: "upgrade"

    # Only configuration mode:
    # When true, only the post-upgrade configuration tasks run.
    only_config: false
  roles:
    - upgrade_ibm
Explanation & Features:

Sample Playbook:
This file demonstrates how to invoke the role with variable overrides.
Workflow Control:
Variables like mode, only_config, upgrade_enabled, and enable_rollback let you control which parts of the role execute.
Final Role Overview
vars/main.yml:
Defines global variables including backup directories (isolated per host via ansible_hostname), source directories, retention settings, component definitions, and control variables.
installation_flags.yml:
Provides external installation flag settings.
tasks/main.yml:
Orchestrates the workflow:
Sets start time, loads installation flags.
Based on mode and only_config, runs backup and upgrade tasks (with rollback if enabled) or only restore tasks.
Finally, calculates and displays total execution time.
tasks/backup.yml:
Uses include_tasks with a loop (custom loop variables) to process each source directory for backup.
tasks/process_webserver_backup.yml & tasks/process_websphere_backup.yml:
Archive source directories using tar (with the -C option to store only relative paths) and safely remove older backups.
tasks/upgrade.yml:
Contains placeholder upgrade commands.
tasks/restore.yml:
Uses include_tasks with a loop to process each source directory for restore.
tasks/process_webserver_restore.yml & tasks/process_websphere_restore.yml:
Force-remove current directories with retries (using rm -rf via shell), then extract the latest tar archive, and clean up older backups—all using a custom loop variable (backup_file).
tasks/post_configs.yml:
Contains post‑upgrade configuration tasks that always run.
upgrade_ibm_playbook.yml:
A sample playbook showing how to invoke the role with variable overrides.
This role now uses tar for backup/restore (with relative paths), implements safe cleanup and forced removal with retries, uses custom loop variable names (such as backup_file), and measures the overall execution time—all while providing full control over the workflow via mode and configuration variables.
