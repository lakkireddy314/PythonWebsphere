#!/usr/bin/env jython
import sys, os
from com.ibm.ws.scripting import ScriptingException

# -- Validate inputs (wsadmin omits script name)
if len(sys.argv) < 3:
    print "✖ Usage: importCerts.py profile:host keystorePassword was_user"
    sys.exit(1)

profile_host      = sys.argv[0]  # e.g. "dmgr_profile_name:hostname1"
keystore_password = sys.argv[1]
was_user          = sys.argv[2]

# -- Split profile vs. host
if ':' not in profile_host:
    print "✖ Invalid argument '%s', expected profile:host" % profile_host
    sys.exit(1)
raw_profile, host = profile_host.split(':', 1)
profile = raw_profile[:-len('_profile_name')] if raw_profile.endswith('_profile_name') else raw_profile
alias  = host + "_subca_ss"
cert_path = "/home/%s/Ansible_SelfSigned/%s.pfx" % (was_user, host)

# -- Discover cell
cell_ids = AdminConfig.list('Cell').split()
if not cell_ids:
    print "✖ No Cell found!"
    sys.exit(1)
cellName = AdminConfig.showAttribute(cell_ids[0], 'name')

# -- Helper to parse entries
def strip_trailing_paren(s):
    return s[:-1] if s.endswith(')') else s

def parseServerEntries(entries):
    mapping = {}
    for entry in entries:
        name, rest = entry.split('(', 1)
        cfgPath = strip_trailing_paren(rest)
        _, nodePath = cfgPath.split('|', 1)
        parts    = nodePath.split('/')
        cName    = parts[1]; nName = parts[3]
        nodeId   = AdminConfig.getid('/Cell:%s/Node:%s/' % (cName, nName))
        hostName = AdminConfig.showAttribute(nodeId, 'hostName')
        mapping[name] = {'cellName': cName, 'nodeName': nName, 'hostName': hostName}
    return mapping

# -- Build mappings
dmgr_map = parseServerEntries(AdminTask.listServers('[-serverType DEPLOYMENT_MANAGER ]').splitlines())
node_map = parseServerEntries(AdminTask.listServers('[-serverType NODE_AGENT ]').splitlines())
web_map  = parseServerEntries(AdminTask.listServers('[-serverType WEB_SERVER ]').splitlines())

# -- Determine profile type and scope
if profile in dmgr_map:
    info     = dmgr_map[profile]
    scope    = "(cell):%s" % info['cellName']
    ksName   = "CellDefaultKeyStore"
    ssl_path = "/Cell:%s/Security:/SSLConfig:defaultSSLConfig/" % info['cellName']

elif profile in node_map:
    info     = node_map[profile]
    scope    = "(cell):%s:(node):%s" % (info['cellName'], info['nodeName'])
    ksName   = "NodeDefaultKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (info['cellName'], info['nodeName'])

elif profile in web_map:
    info     = web_map[profile]
    scope    = "(cell):%s:(node):%s" % (info['cellName'], info['nodeName'])
    ksName   = "CMSKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (info['cellName'], info['nodeName'])
    wsrv_id  = AdminConfig.getid(ssl_path.replace('/SSLConfig:defaultSSLConfig/', '/WebServer:%s/' % profile)).split()[0]

else:
    print "✖ Profile '%s' not found as DMGR, NodeAgent, or WebServer" % profile
    sys.exit(1)

# -- Import and configure
try:
    # Import PFX
    AdminTask.importCertificate([
        '-keyStoreName', ksName,
        '-keyStoreScope', scope,
        '-keyFilePath', cert_path,
        '-keyFilePassword', keystore_password,
        '-keyFileType', 'PKCS12',
        '-certificateAliasFromKeyFile', alias
    ])  :contentReference[oaicite:7]{index=7}

    if profile in web_map:
        # Add CERTLABEL property
        props = AdminConfig.list('PluginProperties', wsrv_id).split()
        if props:
            AdminConfig.create('Property', props[0],
                               [['name', 'CERTLABEL'], ['value', alias]])
        AdminConfig.save()
        # Regenerate & propagate plugin config
        AdminTask.generatePluginCfg(['-serverName', profile, '-nodeName', info['nodeName']])
        AdminTask.propagatePluginCfg(['-serverName', profile, '-nodeName', info['nodeName']])
        AdminConfig.save()
        print "✔ Profile %s (WebServer): imported alias '%s' and propagated plugin" % (profile, alias)

    else:
        # Update SSLConfig default alias
        ssl_ids = AdminConfig.getid(ssl_path).split()
        if ssl_ids:
            AdminConfig.modify(ssl_ids[0], [
                ['keyStoreName', ksName],
                ['keyStoreScope', scope],
                ['certificateAlias', alias]
            ])
        AdminConfig.save()
        print "✔ Profile %s: imported alias '%s'" % (profile, alias)

    sys.exit(0)

except ScriptingException, e:
    print "✖ Error in profile '%s': %s" % (profile, e)
    sys.exit(1)
