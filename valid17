# getSecurePorts_withRealHost.py
# Usage: wsadmin.sh -lang jython \
#   -conntype SOAP -host <dmgrHost> -port <dmgrPort> \
#   -f getSecurePorts_withRealHost.py

import java

# Java line separator for splitting list() results
sep = java.lang.System.getProperty('line.separator')

# --- 1. Cell name ----
cellId   = AdminConfig.list('Cell').splitlines()[0]
cellName = AdminConfig.showAttribute(cellId, 'name')  # e.g., "MyCell" :contentReference[oaicite:3]{index=3}

# --- 2. Build nodeName → hostName map ----
nodeHostMap = {}
for nodeId in AdminConfig.list('Node').splitlines():
    # Clean node name (no trailing ServerEntry junk) :contentReference[oaicite:4]{index=4}
    nodeName = AdminConfig.showAttribute(nodeId, 'name')
    # Actual DNS name or IP for the node :contentReference[oaicite:5]{index=5}
    hostName = AdminConfig.showAttribute(nodeId, 'hostName')
    nodeHostMap[nodeName] = hostName

# --- 3. Iterate all ServerEntry objects (includes app servers + dmgr) ----
for srvEntry in AdminConfig.list('ServerEntry').splitlines():
    srvName = srvEntry.split('(')[0]  # e.g., "AppSrv1"
    # Determine which node this entry lives on by matching the path fragment
    nodeName = None
    for n in nodeHostMap:
        if '/nodes/%s/' % n in srvEntry:
            nodeName = n
            break
    if not nodeName:
        continue  # skip if we can’t map to a known node

    # --- 4. Find the secure HTTPS endpoint ----
    for nep in AdminConfig.list('NamedEndPoint', srvEntry).split(sep):
        if not nep.strip():
            continue
        if AdminConfig.showAttribute(nep, 'endPointName') == 'WC_defaulthost_secure':
            port    = AdminConfig.showAttribute(nep, 'port')
            host    = nodeHostMap[nodeName]
            # Print: cellName nodeName serverName host port
            print "%s %s %s %s %s" % (
                cellName, nodeName, srvName, host, port)
            break
