#!/usr/bin/env jython
import sys, os
from com.ibm.ws.scripting import ScriptingException

# 1) Validate arguments (wsadmin drops the script name)
if len(sys.argv) < 3:
    print "✖ Usage: importCerts.py profile:host keystorePassword was_user"
    sys.exit(1)

# 2) Parse inputs
profile_host      = sys.argv[0]      # e.g. "dmgr_profile:hostname1"
keystore_password = sys.argv[1]      # your PKCS12 password
was_user          = sys.argv[2]      # e.g. "wasadmin"

# 3) Split into profile and host
if ':' not in profile_host:
    print "✖ Invalid argument '%s', expected profile:host" % profile_host
    sys.exit(1)
profile, host = profile_host.split(':', 1)

alias     = host + "_subca_ss"
cert_path = "/home/%s/Ansible_SelfSigned/%s.pfx" % (was_user, host)

# 4) Discover the cell
cell_ids = AdminConfig.list('Cell').split()
if not cell_ids:
    print "✖ No Cell found!"
    sys.exit(1)
cellName = AdminConfig.showAttribute(cell_ids[0], 'name')

# 5) List all Server objects (for DMGR & NodeAgent detection)
server_ids = AdminConfig.list('Server').split()

def find_server(name, typ):
    """Return the Server ID matching given name and serverType."""
    for sid in server_ids:
        if (AdminConfig.showAttribute(sid, 'name') == name and
            AdminConfig.showAttribute(sid, 'serverType') == typ):
            return sid
    return None

dmgr_id = find_server(profile, 'DEPLOYMENT_MANAGER')
node_id = find_server(profile, 'NODE_AGENT')

# 6) List WebServer objects
websrv_ids = AdminConfig.list('WebServer').split()

def find_webserver(name):
    """Return the WebServer config ID matching the given name."""
    for wid in websrv_ids:
        if AdminConfig.showAttribute(wid, 'name') == name:
            return wid
    return None

wsrv_id = None
if not dmgr_id and not node_id:
    wsrv_id = find_webserver(profile)

# 7) Determine keystore scope, name, and SSLConfig path
if dmgr_id:
    scope    = "(cell):%s" % cellName
    ksName   = "CellDefaultKeyStore"
    ssl_path = "/Cell:%s/Security:/SSLConfig:defaultSSLConfig/" % cellName

elif node_id:
    nodeName = profile.replace('_profile_name','')
    scope    = "(cell):%s:(node):%s" % (cellName, nodeName)
    ksName   = "NodeDefaultKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (cellName, nodeName)

elif wsrv_id:
    nodeName = AdminConfig.showAttribute(wsrv_id, 'nodeName')
    scope    = "(cell):%s:(node):%s" % (cellName, nodeName)
    ksName   = "CMSKeyStore"
    ssl_path = "/Cell:%s/Node:%s/Security:/SSLConfig:defaultSSLConfig/" % (cellName, nodeName)

else:
    print "✖ Profile '%s' not found as DMGR, NodeAgent, or WebServer" % profile
    sys.exit(1)

# 8) Perform import and configuration
try:
    # Import into the appropriate keystore
    AdminTask.importCertificate([
        '-keyStoreName',            ksName,
        '-keyStoreScope',           scope,
        '-keyFilePath',             cert_path,
        '-keyFilePassword',         keystore_password,
        '-keyFileType',             'PKCS12',
        '-certificateAliasFromKeyFile', alias
    ])

    # If WebServer, also update plugin-cfg.xml
    if wsrv_id:
        # Add CERTLABEL property
        props = AdminConfig.list('PluginProperties', wsrv_id).split()
        if props:
            AdminConfig.create(
                'Property', props[0],
                [['name',  'CERTLABEL'],
                 ['value', alias]]
            )
        AdminConfig.save()

        # Regenerate and propagate plugin configuration
        AdminTask.generatePluginCfg(['-serverName', profile, '-nodeName', nodeName])
        AdminTask.propagatePluginCfg(['-serverName', profile, '-nodeName', nodeName])
        AdminConfig.save()

        print "✔ Profile %s (WebServer): imported alias '%s' and propagated plugin" % (profile, alias)

    else:
        # Update default SSLConfig for DMGR or NodeAgent
        ssl_ids = AdminConfig.getid(ssl_path).split()
        if ssl_ids:
            AdminConfig.modify(ssl_ids[0], [
                ['keyStoreName',     ksName],
                ['keyStoreScope',    scope],
                ['certificateAlias', alias]
            ])
        AdminConfig.save()
        print "✔ Profile %s: imported alias '%s'" % (profile, alias)

    sys.exit(0)

except ScriptingException, e:
    print "✖ Error in profile '%s': %s" % (profile, e)
    sys.exit(1)
