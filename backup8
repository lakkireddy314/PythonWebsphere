The role folder structure is as follows:

css
Copy
upgrade_ibm/
├── tasks
│   ├── main.yml
│   ├── backup.yml
│   ├── process_webserver_backup.yml
│   ├── process_websphere_backup.yml
│   ├── upgrade.yml
│   ├── restore.yml
│   ├── process_webserver_restore.yml
│   ├── process_websphere_restore.yml
│   └── post_configs.yml
├── vars
│   └── main.yml
└── installation_flags.yml
And a sample playbook:
upgrade_ibm_playbook.yml

Below are the contents of each file along with explanations and features.

1. File: upgrade_ibm/vars/main.yml
yaml
Copy
---
# Base backup directory where archives are stored.
backup_dir: "/install/BAW/backups"

# Environment (e.g., production, staging)
env: "production"

# User used in directory paths.
baw_user: "bawuser"

# --- Target directories (where the archives will be stored) ---
# Backups are stored on a per-host basis using ansible_hostname.
websphere_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebSphere"
webserver_backup_dir: "{{ backup_dir }}/{{ env }}/{{ ansible_hostname }}/WebServer"

# --- Source directories to be archived (tarred) for backup ---
webserver_tar_dir:
  - /opt/ihs/85
  - /opt/websphere/85
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

websphere_tar_dir:
  - /opt/wps8/websphere/
  - /home/{{ baw_user }}/var
  - /home/{{ baw_user }}/etc

# How many backup archives to retain (older ones will be removed)
backup_retain: 3

# The following installation flags may be overridden by installation_flags.yml.
baw_installed: false
websphere_installed: false
ihs_installed: false
plugin_installed: false

# Define a components list used by restore tasks.
components:
  - name: "WebServer"
    tar_dirs: "{{ webserver_tar_dir }}"
    backup_dir: "{{ webserver_backup_dir }}"
    installed: "{{ (ihs_installed | default(false)) or (plugin_installed | default(false)) }}"
  - name: "WebSphere"
    tar_dirs: "{{ websphere_tar_dir }}"
    backup_dir: "{{ websphere_backup_dir }}"
    installed: "{{ (websphere_installed | default(false)) or (baw_installed | default(false)) }}"

# Upgrade control:
# If true, perform a pre-upgrade backup.
pre_upgrade_backup: true

# Rollback control:
# Set enable_rollback to true to run restore tasks in case of an upgrade failure.
enable_rollback: true

# Optional upgrade tasks control:
# Set upgrade_enabled to true to run upgrade tasks (default) or false to skip them.
upgrade_enabled: true

# Mode control:
# "upgrade" runs the full upgrade process (with backup, optional upgrade tasks,
# rollback on failure, and post-upgrade configuration).
# "restore" runs only the restore tasks.
mode: "upgrade"

# Only configuration mode:
# When true, only the post-upgrade configuration tasks run.
only_config: false
Features & Explanation:
Backup & Target Paths:
The target directories include {{ ansible_hostname }} so each host’s backups are isolated.
Components List:
Aggregates details (source directories and target backup directory) for each component.
Control Variables:
Variables such as pre_upgrade_backup, enable_rollback, upgrade_enabled, mode, and only_config govern which parts of the role run.
Installation Flags:
Their defaults here can be overridden by an external file.
2. File: upgrade_ibm/installation_flags.yml
yaml
Copy
---
baw_installed: false
websphere_installed: true
ihs_installed: false
plugin_installed: true
Features & Explanation:
External Installation Flags:
This file is loaded at runtime to override or set installation flags.
3. File: upgrade_ibm/tasks/main.yml
yaml
Copy
---
# Main tasks file for the upgrade_ibm role.
#
# Workflow:
# - First, load installation flags from installation_flags.yml.
# - If only_config is true, only post-upgrade configuration tasks run.
# - Else, if mode is "upgrade":
#     1. Optionally run pre-upgrade backup tasks.
#     2. Optionally run upgrade tasks (if upgrade_enabled is true) inside a block.
#        If any upgrade task fails and enable_rollback is true, the rescue section triggers restore tasks.
#     3. The always section runs post-upgrade configuration tasks.
# - Else, if mode is "restore": only the restore tasks are executed.

- name: Load installation flags from installation_flags.yml
  include_vars: "installation_flags.yml"

- name: Run only configuration tasks if only_config is true
  import_tasks: post_configs.yml
  when: only_config | default(false)

- name: Run upgrade process if not only_config and mode is "upgrade"
  block:
    - name: Run pre-upgrade backup tasks (if enabled)
      import_tasks: backup.yml
      when: pre_upgrade_backup | default(false)

    - name: Run upgrade tasks for IBM WebServer and IBM WebSphere (optional)
      import_tasks: upgrade.yml
      when: upgrade_enabled | default(true)
  rescue:
    - name: Upgrade process failed - rollback disabled message
      debug:
        msg: "Upgrade failed. Rollback is disabled."
      when: not (enable_rollback | default(true))
    - name: Upgrade process failed; executing restore tasks for rollback
      import_tasks: restore.yml
      when: enable_rollback | default(true)
  always:
    - name: Run post-upgrade configuration tasks
      import_tasks: post_configs.yml
  when: (mode == "upgrade") and not (only_config | default(false))

- name: Run only restore tasks if not only_config and mode is "restore"
  import_tasks: restore.yml
  when: (mode == "restore") and not (only_config | default(false))
Features & Explanation:
Loading Installation Flags:
The first task loads external installation flag variables.
Mode & Only Config Control:
If only_config is true, only configuration tasks run; otherwise, the role behaves according to mode (upgrade or restore).
Block/Rescue/Always Structure:
In "upgrade" mode, the block runs backup (if enabled) and upgrade tasks (if enabled); if any upgrade task fails and rollback is enabled, restore tasks run. The always section runs post‑upgrade configuration tasks.
4. File: upgrade_ibm/tasks/backup.yml
yaml
Copy
---
# Backup tasks for IBM WebServer and IBM WebSphere.
# Instead of looping on a block, use include_tasks to process each source directory individually.
- name: Process WebServer backup for each source directory
  include_tasks: process_webserver_backup.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere backup for each source directory
  include_tasks: process_websphere_backup.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Features & Explanation:
Looping with include_tasks:
Instead of using a loop directly on a block, we use include_tasks to process each source directory. This method is more reliable across Ansible versions.
5. File: upgrade_ibm/tasks/process_webserver_backup.yml
yaml
Copy
---
- name: Check if source directory {{ ws_src }} exists (WebServer)
  stat:
    path: "{{ ws_src }}"
  register: ws_source_stat

- name: Ensure target backup directory exists for {{ ws_src | basename }} (WebServer)
  file:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    state: directory
    mode: '0755'
  when: ws_source_stat.stat.exists

- name: Archive {{ ws_src }} (WebServer) using tar
  command: >
    tar -cf "{{ webserver_backup_dir }}/{{ ws_src | basename }}/{{ ws_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ ws_src }}"
  when: ws_source_stat.stat.exists

- name: Find existing backups for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: ws_existing_backups
  when: ws_source_stat.stat.exists

- name: Remove old WebServer backups for {{ ws_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ws_existing_backups.files | sort(attribute='mtime') | list | slice(0, ws_existing_backups.files | length - backup_retain) }}"
  loop_control:
    loop_var: item
  when: ws_source_stat.stat.exists and (ws_existing_backups.files | length > backup_retain)
Features & Explanation:
Using Tar via Command Module:
Instead of the archive module, the command module runs tar -cf to create a tar archive.
Cleanup:
After archiving, it finds and removes older backups based on the retention limit.
6. File: upgrade_ibm/tasks/process_websphere_backup.yml
yaml
Copy
---
- name: Check if source directory {{ wsphere_src }} exists (WebSphere)
  stat:
    path: "{{ wsphere_src }}"
  register: wsphere_source_stat

- name: Ensure target backup directory exists for {{ wsphere_src | basename }} (WebSphere)
  file:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    state: directory
    mode: '0755'
  when: wsphere_source_stat.stat.exists

- name: Archive {{ wsphere_src }} (WebSphere) using tar
  command: >
    tar -cf "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}/{{ wsphere_src | basename }}_{{ ansible_date_time.iso8601_basic }}.tar" "{{ wsphere_src }}"
  when: wsphere_source_stat.stat.exists

- name: Find existing backups for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: wsphere_existing_backups
  when: wsphere_source_stat.stat.exists

- name: Remove old WebSphere backups for {{ wsphere_src | basename }} (retain {{ backup_retain }})
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ wsphere_existing_backups.files | sort(attribute='mtime') | list | slice(0, wsphere_existing_backups.files | length - backup_retain) }}"
  loop_control:
    loop_var: item
  when: wsphere_source_stat.stat.exists and (wsphere_existing_backups.files | length > backup_retain)
Features & Explanation:
Tar Command for WebSphere:
Similar to WebServer, this file uses tar to create an archive for each source directory.
Cleanup of Older Backups:
It finds and removes older backup archives as per the retention limit.
7. File: upgrade_ibm/tasks/upgrade.yml
yaml
Copy
---
# Upgrade tasks for IBM WebServer and IBM WebSphere.
# Replace the debug tasks below with your actual upgrade installer commands or scripts.
- name: Upgrade IBM WebServer Block
  block:
    - name: Execute upgrade commands for WebServer (example)
      debug:
        msg: "Upgrading IBM WebServer on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebServer
      debug:
        msg: "Running WebServer post-upgrade configuration on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Upgrade IBM WebSphere Block
  block:
    - name: Execute upgrade commands for WebSphere (example)
      debug:
        msg: "Upgrading IBM WebSphere on {{ ansible_hostname }}..."
    - name: Execute post-upgrade configuration for WebSphere
      debug:
        msg: "Running WebSphere post-upgrade configuration on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Features & Explanation:
Placeholder Upgrade Tasks:
These tasks are placeholders. Replace the debug messages with your actual upgrade commands.
Conditional Execution:
They run based on the corresponding installation flags.
8. File: upgrade_ibm/tasks/restore.yml
yaml
Copy
---
# Restore tasks for IBM WebServer and IBM WebSphere on a per-host basis.
# Instead of using a loop on a block, include_tasks is used to process each source directory.
- name: Process WebServer restore for each source directory
  include_tasks: process_webserver_restore.yml
  loop: "{{ webserver_tar_dir }}"
  loop_control:
    loop_var: ws_src
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Process WebSphere restore for each source directory
  include_tasks: process_websphere_restore.yml
  loop: "{{ websphere_tar_dir }}"
  loop_control:
    loop_var: wsphere_src
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Features & Explanation:
Restore via Include Tasks:
The restore tasks are separated into individual files and processed via a loop to avoid issues with looping directly on blocks.
9. File: upgrade_ibm/tasks/process_webserver_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ ws_src | basename }} (WebServer)
  stat:
    path: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ ws_src | basename }} (WebServer) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ ws_src | basename }} (WebServer) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ ws_src | basename }} (WebServer)
  find:
    paths: "{{ webserver_backup_dir }}/{{ ws_src | basename }}"
    patterns: "{{ ws_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ ws_src | basename }} (WebServer)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: absent
  when: latest_backup is defined

- name: Recreate directory {{ ws_src }} (WebServer)
  file:
    path: "{{ ws_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ ws_src | basename }} (WebServer)
  command: tar -xf "{{ latest_backup }}" -C "{{ ws_src }}"
  when: latest_backup is defined

- name: Clean up older backups for {{ ws_src | basename }} (WebServer) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1
Features & Explanation:
Restore with Tar Command:
Instead of using the unarchive module, this file uses the command module with tar -xf to extract the backup archive.
Conditional Logic:
It checks for the backup target, finds backups, selects the latest archive, removes and recreates the source directory, restores, and cleans up old backups.
10. File: upgrade_ibm/tasks/process_websphere_restore.yml
yaml
Copy
---
- name: Check if backup target exists for {{ wsphere_src | basename }} (WebSphere)
  stat:
    path: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
  register: backup_target_stat

- name: Skip restore for {{ wsphere_src | basename }} (WebSphere) if no backup found on {{ ansible_hostname }}
  debug:
    msg: "No backup archive available for {{ wsphere_src | basename }} (WebSphere) on {{ ansible_hostname }}."
  when: not backup_target_stat.stat.exists

- name: Find backup files for {{ wsphere_src | basename }} (WebSphere)
  find:
    paths: "{{ websphere_backup_dir }}/{{ wsphere_src | basename }}"
    patterns: "{{ wsphere_src | basename }}_*.tar"
    file_type: file
  register: backup_files
  when: backup_target_stat.stat.exists

- name: Set latest backup file for {{ wsphere_src | basename }} (WebSphere)
  set_fact:
    latest_backup: "{{ (backup_files.files | sort(attribute='mtime') | list | last).path }}"
  when: backup_files.files | length > 0

- name: Remove current directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: absent
  when: latest_backup is defined

- name: Recreate directory {{ wsphere_src }} (WebSphere)
  file:
    path: "{{ wsphere_src }}"
    state: directory
    mode: '0755'
  when: latest_backup is defined

- name: Restore from latest backup for {{ wsphere_src | basename }} (WebSphere)
  command: tar -xf "{{ latest_backup }}" -C "{{ wsphere_src }}"
  when: latest_backup is defined

- name: Clean up older backups for {{ wsphere_src | basename }} (WebSphere) - keep only latest
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | sort(attribute='mtime') | list | slice(0, -1) }}"
  loop_control:
    loop_var: item
  when: backup_files.files | length > 1
Features & Explanation:
WebSphere Restore:
Follows the same logic as WebServer restore but applies to WebSphere source directories.
Tar Extraction:
Uses tar command to extract backups into the correct destination.
11. File: upgrade_ibm/tasks/post_configs.yml
yaml
Copy
---
# Post-upgrade configuration tasks.
# These tasks run in the always section of the main block,
# regardless of whether the upgrade succeeded or failed.
# Use this file to apply final configurations, validations, or notifications.

- name: Run post-upgrade configuration for IBM WebServer
  debug:
    msg: "Applying post-upgrade configuration for IBM WebServer on {{ ansible_hostname }}..."
  when: (ihs_installed | default(false)) or (plugin_installed | default(false))

- name: Run post-upgrade configuration for IBM WebSphere
  debug:
    msg: "Applying post-upgrade configuration for IBM WebSphere on {{ ansible_hostname }}..."
  when: (websphere_installed | default(false)) or (baw_installed | default(false))
Features & Explanation:
Post-Configuration:
Runs tasks after the upgrade (or rollback) process. These tasks are independent and run regardless of upgrade outcome.
12. File: upgrade_ibm_playbook.yml
yaml
Copy
---
- name: Upgrade IBM WebServer and IBM WebSphere with Backup/Restore and Optional Config Only
  hosts: aix_servers
  gather_facts: yes
  vars:
    # Override variables if needed.
    backup_dir: "/install/BAW/backups"
    env: "production"
    baw_user: "bawuser"
    webserver_tar_dir:
      - /opt/ihs/85
      - /opt/websphere/85
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc
    websphere_tar_dir:
      - /opt/wps8/websphere/
      - /home/{{ baw_user }}/var
      - /home/{{ baw_user }}/etc

    # Installation flags (can also be loaded from installation_flags.yml)
    baw_installed: false
    websphere_installed: true
    ihs_installed: false
    plugin_installed: true

    # Upgrade control.
    pre_upgrade_backup: true
    enable_rollback: true
    upgrade_enabled: true

    # Mode control:
    # "upgrade" runs the full upgrade process,
    # "restore" runs only the restore tasks.
    mode: "upgrade"

    # Only configuration mode:
    # When true, only the post-upgrade configuration tasks run.
    only_config: false
  roles:
    - upgrade_ibm
Features & Explanation:
Sample Playbook:
Demonstrates how to invoke the role with variable overrides.
Control Over Workflow:
The combination of mode, only_config, upgrade_enabled, and enable_rollback allows full control over which parts of the role execute.
Final Role Overview
vars/main.yml:
Defines all global variables—including per‑host backup paths, source directories, retention limits, component definitions, and control switches (mode, only_config, upgrade_enabled, enable_rollback). Installation flags are set here but can be overridden by the external file.

installation_flags.yml:
Provides external installation flag values which are loaded by main.yml.

tasks/main.yml:
Orchestrates the workflow:

Loads external installation flags.
If only_config is true, only post‑configuration tasks run.
In "upgrade" mode, runs pre‑upgrade backup (if enabled), then upgrade tasks (if enabled) inside a block/rescue/always structure:
If upgrade tasks fail and rollback is enabled, restore tasks run.
The always section executes post‑upgrade configuration tasks.
In "restore" mode, only restore tasks run.
tasks/backup.yml:
Uses include_tasks with loops to process each source directory for backup without directly looping on a block.

tasks/process_webserver_backup.yml & process_websphere_backup.yml:
Contain the backup logic using the tar command (via the command module) to create tar archives and clean up old ones.

tasks/upgrade.yml:
Contains placeholder upgrade commands; replace debug tasks with your actual upgrade logic.

tasks/restore.yml:
Uses include_tasks with loops to process restore operations for each source directory.

tasks/process_webserver_restore.yml & process_websphere_restore.yml:
Contain the restore logic using the tar command to extract the latest backup into the source directory and clean up older archives.

tasks/post_configs.yml:
Contains post‑upgrade configuration tasks that always run.

upgrade_ibm_playbook.yml:
A sample playbook that shows how to run the role with custom variable overrides.

This final role provides a robust and flexible upgrade workflow using tar commands for backup/restore, supports per‑host isolation via ansible_hostname, and offers complete control over upgrade, rollback, and configuration tasks.










Search

Deep research
