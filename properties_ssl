- name: Load all role vars files
  ansible.builtin.include_vars:
    dir: "{{ role_path }}/vars"

- name: Run DBUpgrade script and respond to prompt
  expect:
    command: "{{ websphere_install_root }}/bin/DBUpgrade.sh -profileName {{ dmgr_profile }}"
    responses:
      'Please input\\[y/n\\]:': 'y'
    timeout: 600
  register: dbupgrade_result

- name: Ensure DBUpgrade script ran successfully
  assert:
    that:
      - "'All upgrade steps have been completed successfully' in dbupgrade_result.stdout"
    fail_msg: "DBUpgrade script did not run successfully. Output was: {{ dbupgrade_result.stdout }}"
Explanation
expect module:
This module spawns the command and waits for the prompt matching Please input\[y/n\]: (note the escaped square brackets), then automatically sends y as the response.

timeout:
Specifies a maximum waiting time (here, 600 seconds) for the interactive prompt to appear and be answered.

assert module:
After the command runs, we use assert to check that the output includes the success message 'All upgrade steps have been completed successfully'.

This approach automates the interactive step, ensuring your upgrade script runs non-interactively within your playbook.


Running the Script:
The first task uses the command module to execute the script located in the bin directory of your install root, passing the dmgr_profile as the profile name.
Registering the Output:
The output of the command is captured in the variable dbupgrade_result.
Verification:
The second task uses the assert module to check that the expected success message appears in the command output. If the message is not found, the task fails and provides the output for debugging.
This setup ensures that your playbook only continues if the DBUpgrade script completes successfully as indicated by the specific success message.




- name: Set dmgr_profile variable if directory contains "dm"
  set_fact:
    dmgr_profile: >-
      {{
        lookup('fileglob', websphere_install_root ~ '/profiles/*')
        | select('search', 'dm')
        | list
        | first
      }}


Below is a complete example of an Ansible role that is fully compatible with Ansible 2.6. It:

Recursively searches under the directory defined by {{ websphere_install_root }} for files named ssl.client.props.
Appends a block (only if not already present) at the end of each file.
Inserts a commented heading:
arduino
Copy
# websphere fixpack 8.5.5.27 custom properties
followed by the contents of a properties file located in the role’s properties folder (named was_fixpack.properties), which in this example contains:
ini
Copy
com.ibm.ssl=true
Role Directory Structure
css
Copy
my_wasfix_role/
├── defaults
│   └── main.yml
├── tasks
│   └── main.yml
└── properties
    └── was_fixpack.properties
File Contents
1. defaults/main.yml
Define default variables such as the WebSphere installation root:

yaml
Copy
---
# defaults/main.yml
websphere_install_root: "/opt/IBM/WebSphere"
2. tasks/main.yml
This tasks file performs the following actions:

Uses the find module to search recursively for files named ssl.client.props under {{ websphere_install_root }}.
For each found file, uses the blockinfile module to append a custom properties block (if not already present) at the end of the file.
The block includes a commented heading followed by the contents of the local properties file.
Note: Although Ansible 2.6 supports the loop keyword, this example uses with_items to ensure maximum compatibility with similar syntax from earlier versions.

yaml
Copy
---
# tasks/main.yml

- name: Find all ssl.client.props files under websphere_install_root
  find:
    paths: "{{ websphere_install_root }}"
    patterns: "ssl.client.props"
  register: ssl_client_props_files

- name: Append custom wasfix properties block to ssl.client.props files if not already present
  blockinfile:
    path: "{{ item.path }}"
    marker: "# {mark} WASFIX PACK PROPERTIES"
    insertafter: EOF
    block: |
      # websphere fixpack 8.5.5.27 custom properties
      {{ lookup('file', 'properties/was_fixpack.properties') }}
  with_items: "{{ ssl_client_props_files.files }}"
  become: yes
3. properties/was_fixpack.properties
Create this file in the role’s properties directory with the following content:

ini
Copy
com.ibm.ssl=true
Explanation
Finding Files:
The first task uses the find module to search for all files named ssl.client.props under {{ websphere_install_root }} and registers the list in ssl_client_props_files.

Appending the Block:
The second task iterates over each file found and uses the blockinfile module to insert a block at the end of the file.

marker: The marker (# {mark} WASFIX PACK PROPERTIES) ensures that the block is only added once per file.
block: The block starts with the commented header (# websphere fixpack 8.5.5.27 custom properties) and then inserts the contents of was_fixpack.properties using the lookup function.
insertafter: EOF: This ensures that the block is appended at the very end of the file.
become: yes: Allows the task to run with elevated privileges if necessary.
When you include this role in your playbook, every ssl.client.props file found under your WebSphere installation root will be updated with the custom properties block—ensuring it is added only once.
