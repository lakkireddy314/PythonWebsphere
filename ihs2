1. group_vars/prod.yml
yaml
Copy
Edit
httpd_pickup_ids:
  "/opt/ihs/conf/test1.conf": "cert_alias_test1"
  "/opt/ihs/conf/test2.conf": "cert_alias_test2"
Maps each HTTPD config to its Venafi alias. (unchanged) 
IBM

2. vars/main.yml
yaml
Copy
Edit
env: "prod"

vcert_download_url: "https://localhost/Certs/vcert.zip"
vcert_install_dir:  "/tmp/vcert"
vcert_password:     "WEBASCh@ngeit"

venafi_access_token: "REPLACE_WITH_ACCESS_TOKEN"
venafi_pickupid:     "REPLACE_WITH_PICKUP_ID"

cert_renew_threshold: 90

httpd_config_path:  "/opt/ihs/85/conf/httpd.conf"

report_only:        false
Centralizes all tunable variables. (unchanged) 
Reddit

3. handlers/main.yml
yaml
Copy
Edit
---
- name: "Renew PFX via VCert CLI"
  command: >
    {{ vcert_install_dir }}/vcert renew
      --alias {{ cert_alias }}
      --format pfx
      --password {{ vcert_password }}
      --chain full
      --output {{ vcert_install_dir }}/{{ cert_alias }}.pfx
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  args:
    creates: "{{ vcert_install_dir }}/{{ cert_alias }}.pfx"
  delegate_to: localhost
  tags:
    - renew
    - vcert-renew

- name: "Restart IBM HTTP Server"
  command: "/opt/ihs/85/bin/apachectl -f {{ httpd_config_path }} -k restart"
  listen: "cert_replaced"
  tags:
    - restart
creates: ensures idempotent renewals. 
objectcomputing.com

listen: "cert_replaced" triggers restart only when a replacement occurs.

4. tasks/main.yml
yaml
Copy
Edit
---
- include_tasks: download_local_cert.yml

- include_tasks: check_cert_expiry.yml
  when: any_pickup_success
  tags:
    - precheck

- name: "Set host_needs_renewal"
  set_fact:
    host_needs_renewal: >-
      {{ venafi_cert_info
         | dict2items
         | selectattr('value.changed','equalto',true)
         | list | length > 0 }}
  tags:
    - precheck

- debug:
    var: host_needs_renewal
  tags:
    - precheck

- include_tasks: locate_configs.yml
  when: host_needs_renewal
  tags:
    - config-discovery

- include_tasks: extract_values.yml
  when: host_needs_renewal
  tags:
    - extract

- name: "Process each certificate end-to-end"
  include_tasks: process_cert.yml
  loop: "{{ cert_configs }}"
  loop_control:
    loop_var: cert_entry
    label: "{{ cert_entry.cert_alias }}"
  when: host_needs_renewal
  tags:
    - process

- include_tasks: cleanup.yml
  when: host_needs_renewal
  tags:
    - cleanup

- include_tasks: send_report.yml
  when: host_needs_renewal
  tags:
    - report
Uses include_tasks + loop (Ansible 2.9 compatible).

Gated by host_needs_renewal so only hosts with expiring aliases continue. 
TutorialsPoint

5. tasks/download_local_cert.yml
yaml
Copy
Edit
---
- name: "Ensure VCert directory exists"
  file:
    path: "{{ vcert_install_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Download VCert CLI zip if missing"
  get_url:
    url: "{{ vcert_download_url }}"
    dest: "{{ vcert_install_dir }}/vcert.zip"
    creates: "{{ vcert_install_dir }}/vcert.zip"
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Unarchive VCert CLI idempotently"
  unarchive:
    src: "{{ vcert_install_dir }}/vcert.zip"
    dest: "{{ vcert_install_dir }}/"
    remote_src: yes
    creates: "{{ vcert_install_dir }}/vcert"
  delegate_to: localhost
  run_once: true
  tags:
    - precheck
    - vcert-pickup

- name: "Fetch PEM for each alias if missing"
  command: >
    {{ vcert_install_dir }}/vcert pickup
      --format pem
      --output {{ vcert_install_dir }}/{{ alias_entry.value }}.pem
      --pickup-id {{ alias_entry.value }}
      --access_token {{ venafi_access_token }}
      --pickupid {{ venafi_pickupid }}
  args:
    creates: "{{ vcert_install_dir }}/{{ alias_entry.value }}.pem"
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: alias_entry
    label: "{{ alias_entry.key }}"
  register: pickup_results
  delegate_to: localhost
  tags:
    - precheck
    - vcert-pickup

- name: "Set any_pickup_success flag"
  set_fact:
    any_pickup_success: "{{ pickup_results.results
                           | selectattr('rc','equalto',0)
                           | list | length > 0 }}"
  tags:
    - precheck
(Unchanged). Uses creates: for idempotency.

6. tasks/check_cert_expiry.yml
yaml
Copy
Edit
---
- name: "Initialize venafi_cert_info dict"
  set_fact:
    venafi_cert_info: {}
  tags:
    - precheck
    - expiry-check

- name: "Gather expiry-days & serial via Bash"
  shell: |
    exp=$(openssl x509 -enddate -noout \
         -in {{ vcert_install_dir }}/{{ alias_entry.value }}.pem \
         | cut -d= -f2)
    days=$(( ( $(date -d "$exp" +%s) - $(date +%s) ) / 86400 ))
    serial=$(openssl x509 -in {{ vcert_install_dir }}/{{ alias_entry.value }}.pem \
           -serial -noout | cut -d= -f2)
    echo "{{ alias_entry.value }} $days $serial"
  args:
    executable: /bin/bash
  register: expiry_results
  changed_when: false
  delegate_to: localhost
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: alias_entry
    label: "{{ alias_entry.key }}"
  tags:
    - precheck
    - expiry-check

- name: "Build venafi_cert_info from results"
  set_fact:
    venafi_cert_info: >-
      {{
        venafi_cert_info | default({}) | combine({
          (res_entry.stdout.split()[0]): {
            "expiry_days": (res_entry.stdout.split()[1] | int),
            "serial":      (res_entry.stdout.split()[2]),
            "changed":     ((res_entry.stdout.split()[1] | int) <= cert_renew_threshold)
          }
        })
      }}
  loop: "{{ expiry_results.results }}"
  loop_control:
    loop_var: res_entry
    label: "{{ res_entry.stdout.split()[0] }}"
  tags:
    - precheck
    - expiry-check

- name: "Debug venafi_cert_info"
  debug:
    var: venafi_cert_info
  tags:
    - precheck
    - expiry-check
(Unchanged). Uses Bash-based date arithmetic to avoid Jinja2 pitfalls. 
objectcomputing.com

7. tasks/locate_configs.yml
yaml
Copy
Edit
---
- name: "Build list of HTTPD configs"
  set_fact:
    bpm_conf_files: "{{ httpd_pickup_ids | dict2items }}"
  tags:
    - config-discovery
(Unchanged). Prepares list for config parsing.

8. tasks/extract_values.yml
yaml
Copy
Edit
---
- name: "Initialize cert_configs list"
  set_fact:
    cert_configs: []
  tags:
    - extract
    - config-parse

- name: "Extract cert entries from each HTTPD config"
  include_tasks: extract_one_conf.yml
  loop: "{{ httpd_pickup_ids | dict2items }}"
  loop_control:
    loop_var: conf_entry
    label: "{{ conf_entry.key }}"
  tags:
    - extract
    - config-parse
(Unchanged). Leverages include_tasks + loop for Ansible 2.9.

9. tasks/extract_one_conf.yml
All grep -E and sed -E invocations are replaced with POSIX‐BRE without -E, using \{1,\} instead of +.

yaml
Copy
Edit
---
- name: "Check that {{ conf_entry.key }} exists"
  stat:
    path: "{{ conf_entry.key }}"
  register: conf_stat
  changed_when: false
  tags:
    - extract
    - config-parse

- name: "Skip {{ conf_entry.key }} if missing"
  debug:
    msg: "File {{ conf_entry.key }} not found, skipping."
  when: not conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract Keyfile paths"
  shell: |
    grep '^[[:space:]]*Keyfile' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed 's/^[[:space:]]*Keyfile[[:space:]]\{1,\}=\{0,1\}[[:space:]]\{1,\}//'
  register: keyfiles_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract SSLServerCert aliases"
  shell: |
    grep '^[[:space:]]*SSLServerCert' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | sed 's/^[[:space:]]*SSLServerCert[[:space:]]\{1,\}=\{0,1\}[[:space:]]\{1,\}//'
  register: ssl_aliases_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Extract first Listen port"
  shell: |
    grep '^[[:space:]]*Listen' {{ conf_entry.key }} \
      | grep -v '^[[:space:]]*#' \
      | head -n1 \
      | sed 's/^[[:space:]]*Listen[[:space:]]\{1,\}\([[:digit:]]\{1,\}\).*/\1/'
  register: listen_ports_result
  changed_when: false
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse

- name: "Append each Keyfile entry to cert_configs"
  set_fact:
    cert_configs: "{{ cert_configs + [ {
      'config_file': conf_entry.key,
      'kdb_file':    kdb,
      'cert_alias':  conf_entry.value,
      'listen_port': (listen_ports_result.stdout | default('443'))
    } ] }}"
  loop: "{{ keyfiles_result.stdout_lines | default([]) }}"
  loop_control:
    loop_var: kdb
  when:
    - conf_stat.stat.exists
    - keyfiles_result.stdout_lines | length > 0
  tags:
    - extract
    - config-parse

- name: "Debug parsed entries"
  debug:
    msg: >-
      Keyfiles={{ keyfiles_result.stdout_lines | default([]) }},
      SSLServerCerts={{ ssl_aliases_result.stdout_lines | default([]) }},
      ListenPort={{ listen_ports_result.stdout | default('443') }}
  when: conf_stat.stat.exists
  tags:
    - extract
    - config-parse
Explanation of Changes

grep '^[[:space:]]*Keyfile' uses POSIX BRE to match lines starting with optional spaces and Keyfile. 
IBM

grep -v '^[[:space:]]*#' filters out commented lines. 
IBM

sed 's/^[[:space:]]*Keyfile[[:space:]]\{1,\}=\{0,1\}[[:space:]]\{1,\}//' removes the directive name and any equals sign:

[[:space:]]\{1,\} replaces +.

=\{0,1\} replaces optional equals ?. 
Reddit

For SSLServerCert, identical changes apply.

For Listen, sed 's/^[[:space:]]*Listen[[:space:]]\{1,\}\([[:digit:]]\{1,\}\).*/\1/' captures the port number:

\([[:digit:]]\{1,\}\) matches one or more digits. 
Super User

These replacements ensure AIX’s default sed (which doesn’t support -E or + unescaped) can execute successfully 
IBM
Reddit
.

10. tasks/renew_cert.yml
yaml
Copy
Edit
---
- name: "Set cert_alias fact for {{ cert_entry.cert_alias }}"
  set_fact:
    cert_alias: "{{ cert_entry.cert_alias }}"
  tags:
    - renew

- name: "Notify handler to renew PFX"
  meta: noop
  notify: "Renew PFX via VCert CLI"
  tags:
    - renew

- name: "Flush handlers to execute renewal immediately"
  meta: flush_handlers
  tags:
    - renew
(Unchanged)—isolates per-alias renew logic with notify + flush_handlers.

11. tasks/process_cert.yml
yaml
Copy
Edit
---
# 1. Run renewal
- include_tasks: renew_cert.yml
  tags:
    - process

# 2. Backup original KDB
- name: "Create backup dir beside original KDB"
  file:
    path: "{{ cert_entry.kdb_file | dirname }}/Ansible_backup"
    state: directory
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

- name: "Backup original KDB file"
  copy:
    src: "{{ cert_entry.kdb_file }}"
    dest: "{{ cert_entry.kdb_file | dirname }}/Ansible_backup/{{ cert_entry.kdb_file | basename }}"
    backup: no
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

# 3. Backup httpd.conf
- name: "Create backup dir beside httpd.conf"
  file:
    path: "{{ cert_entry.config_file | dirname }}/Ansible_backup"
    state: directory
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

- name: "Backup original httpd.conf"
  copy:
    src: "{{ cert_entry.config_file }}"
    dest: "{{ cert_entry.config_file | dirname }}/Ansible_backup/{{ cert_entry.config_file | basename }}"
    backup: no
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

# 4. Define new_kdb (alias-based)
- name: "Set new_kdb path"
  set_fact:
    new_kdb: "{{ cert_entry.kdb_file | dirname }}/{{ cert_entry.cert_alias }}.kdb"
  tags:
    - process

# 5. Create new KDB file named after alias
- name: "Create new KDB file for {{ cert_entry.cert_alias }}"
  command: >
    gskcmd -keydb -create
      -db {{ new_kdb }}
      -pw {{ vcert_password }}
      -type cms
      -stash
  args:
    creates: "{{ new_kdb }}"
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

# 6. Import renewed PFX into the new KDB
- name: "Import renewed PFX for {{ cert_entry.cert_alias }} into new KDB"
  command: >
    gskcmd -cert -import
      -db {{ new_kdb }}
      -pw {{ vcert_password }}
      -label {{ cert_entry.cert_alias }}
      -file {{ vcert_install_dir }}/{{ cert_entry.cert_alias }}.pfx
      -stash
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

# 7. Update httpd.conf to reference new KDB and alias
- name: "Update Keyfile directive to new KDB"
  lineinfile:
    path: "{{ cert_entry.config_file }}"
    regexp: '^[[:space:]]*Keyfile'
    line: "Keyfile {{ new_kdb }}"
    backrefs: no
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

- name: "Update SSLServerCert directive"
  lineinfile:
    path: "{{ cert_entry.config_file }}"
    regexp: '^[[:space:]]*SSLServerCert'
    line: "SSLServerCert {{ cert_entry.cert_alias }}"
    backrefs: no
  delegate_to: "{{ inventory_hostname }}"
  become: true
  tags:
    - process

# 8. Restart IHS immediately
- name: "Trigger HTTP server restart"
  meta: flush_handlers
  notify: "cert_replaced"
  tags:
    - process
new_kdb is now named after the alias (cert_alias.kdb), not the original KDB path—fulfilling the user request. 
GNU
YouTube

lineinfile updates remain unchanged—compatible with AIX line editing.

12. tasks/cleanup.yml
yaml
Copy
Edit
---
- name: "Cleanup VCert artifacts on control node"
  file:
    path: "{{ vcert_install_dir }}"
    state: absent
  delegate_to: localhost
  run_once: true
  tags:
    - cleanup
(Unchanged)

13. tasks/send_report.yml
yaml
Copy
Edit
---
- name: "Compose certificate report"
  set_fact:
    comprehensive_report: |
      Venafi Certificate Renewal Report ({{ 'DRY RUN' if report_only else 'EXECUTION' }})
      =====================================================
      Host: {{ ansible_hostname }}

      {% for alias, info in venafi_cert_info.items() %}
      - Alias: {{ alias }}
        Days Until Expiry: {{ info.expiry_days }}
        Serial: {{ info.serial }}
        Action: {{ 'Renewed' if info.changed else 'Skipped' }}
      {% endfor %}

- name: "Send email report"
  mail:
    host: "localhost"
    to: "web@test.com"
    subject: "Venafi Cert Renewal Report for {{ ansible_hostname }}"
    body: "{{ comprehensive_report }}"
  tags:
    - report
(Unchanged)

14. README.md
markdown
Copy
Edit
# venafi_cert_renew

## Overview
Automates IBM HTTP Server certificate lifecycle with Venafi:
- PEM pickup & expiry checks  
- HTTPD config parsing (Keyfile, SSLServerCert, Listen port)  
- New alias‐named KDB creation using GSKit `gskcmd`  
- PFX import into KDB  
- Backup of original KDB & `httpd.conf` in `Ansible_backup`  
- Config updates & immediate IHS restart  
- Cleanup & email reporting  

## Requirements
- Ansible ≥ 2.9  
- AIX (no GNU `sed -E`—uses POSIX `sed`)  
- GSKit’s `gskcmd` on targets  
- OpenSSL & Bash on controller  

## Usage
```yaml
- hosts: all
  roles:
    - venafi_cert_renew
Variables
See group_vars/prod.yml and vars/main.yml.

Tags
precheck, extract, process, cleanup, report

License
MIT

markdown
Copy
Edit
**Explanation**  
Describes how to configure and run the role on AIX environments. :contentReference[oaicite:18]{index=18}

---

# Citations

1. **AIX `sed` documentation**: AIX’s default `sed` does **not** support `-E` (extended regex) or unescaped `+`. :contentReference[oaicite:19]{index=19}  
2. **Basics of POSIX `sed`**: Use `\{1,\}` for “one or more” rather than `+`. :contentReference[oaicite:20]{index=20}  
3. **POSIX Character Classes**: `[[:space:]]`, `[[:digit:]]` work on AIX `sed` too. :contentReference[oaicite:21]{index=21}  
4. **Grep without `-E`**: Use basic patterns, avoiding `-E`. :contentReference[oaicite:22]{index=22}  
5. **`lineinfile`**: Works the same on AIX as Linux for `httpd.conf` edits.   
6. **`gskcmd` usage**: GSKit syntax for creating & importing KDBs on AIX.   
7. **`include_tasks + loop`**: Supported since Ansible 2.4—required for Ansible 2.9.   
8. **`notify` + `flush_handlers`**: Queues handler and executes immediately per alias.   
9. **`copy` & `file` modules**: Standard backup methods on AIX.   
10. **`mail` module**: For sending reports. 

With these updates, the role now runs seamlessly on AIX (no `-E` flags), creates KDBs named after the cert alias, backups original files, updates configs, and restarts IBM HTTP Server as needed.
::contentReference[oaicite:29]{index=29}









Sources





Search



